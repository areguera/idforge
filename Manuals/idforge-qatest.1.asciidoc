= idforge-qatest(1)
Alain Reguera Delgado <alain.reguera@gmail.com>
idFORGE Framework =MANPAGE_VERSION=, =MANPAGE_YEAR=: =MANPAGE_DESCRIPTION=
:man source: idFORGE Framework
:man version: =MANPAGE_VERSION=
:man manual: User Commands

== Name

idforge-qatest - =MANPAGE_DESCRIPTION=

== Synopsis

----------------------------------------------------------------------
=MANPAGE_SYNOPSIS=
----------------------------------------------------------------------

== Description

The *{doctitle}* command is the unit testing framework used by
*idforge* developers to assure quality of idforge and its
sub-commands.

The *{doctitle}* command is conceived to make easier for you to create
and run automated quality assurance tests for *idforge* and its
sub-commands quickly and consistently.  Normally, you run *{doctitle}*
several times a day, before committing changes up to public
repositories. So, to be sure your local changes didn't break anything.
Likewise, when you fix a bug, to reproduce the expected behaviour and
refrain it from happening again.

When you execute the *{doctitle}* command it looks for shell scripts
inside the first level of the directories you provided as argument in
the command-line and executes them, one by one, in the order they were
found.  Each shell script is considered to be a test unit and is
written to reproduce the specific features or behaviours you want to
validate using integrity checks.

[[options]]
== Options

include::Commons/options.inc[]

*-a, --add*::
    Creates the shell script you need to implement a new assurance
    test. When you provide this option you are prompted to enter the
    command you want to validate and then its arguments. In this
    process you can only specify one command, but it is possible to
    provide several lines of arguments to it.

*-c COMMAND, --command=COMMAND*::
    Specifies the command that is target to validation and
    arguments later requested will be concatenated to.  When this
    option is not provided, +/usr/bin/idforge+ is used as default
    value. This option must be provided along *-c* option.

*-u, --update*::
    Enables the actualization of integrity files related to a specific
    commands' output. This option must be provided after you've
    rendered the content you want to validate and you are sure it is
    what you expect it to be. Only then use this option to re-create
    the validation files that will tell what the command output should
    be, the next time it is validated. This option must be provided
    along *-m* or *-e* option.

*-m, --mime*::
    Executes actions related to MIME validation. This option is only
    useful when you are checking or updating quality assurance tests.

*-e, --checksum*::
    Executes actions related to checksum validation.  This option is
    only useful when you are checking or updating quality assurance
    tests and the files you are validating doesn't vary their content
    each time they are rendered.

== Integrity checks

The integrity checks provide the information needed to determine
whether a specific set of commands and, optionally, the output they
produce are what they are expected to be --based on the concerted
opinion of both users and developers.

In *{doctitle}*, the integrity checks are triggered whenever the
*command_line* function is called inside the shell script. This
function considers two methods of validation.  One is through
command's exit status and other based on the content of the files
produced. From these methods, the command's exit status is always
verified while the validations related to files' content are performed
at demand, when either *-m* or *-e* option is provided in the
command-line.

=== Command's exit status

The command's exit status validates the execution of the command taken
from concatenating the command provided as argument to *-c* option and
the arguments passed to *command_line* function, inside the shell
script.  When the command's exit status is 0 it is considered to be a
successful command, otherwise it is a failed command.  This check is
useful to know that commands were executed without errors (assuming
those commands also agree that an exit status of 0 is a successful
command).  However, this check doesn't validate the content produced
by the executed command itself.  To do so, it is necessary to extend
the integrity check by applying content-related validation.

=== Files' content validation

The files' content validation includes MIME validation and checksum
validation.

==== MIME validation

This method looks for a file with the +.files+ extension in the shell
script auxiliary directory.  When such a file is detected,
*{doctitle}* makes a list of all files inside the directory where
final output is stored in for that shell script and compares it with
the one in the +.files+ file, so to determine whether they both are
equal or not.  If the result is equal, it is a successful command,
otherwise it is a failed command.

This method can be applied whenever you want to validate file formats
and one specific layout of files. However, this method doesn't assure
that all files produced have the content they are expected to have.

==== Checksum validation

This method looks for files with the +.md5sum+, +.sha1sum+ and
+.sha256sum+ extensions in the shell script auxiliary directory. When
either of such files are detected, *{doctitle}* makes a list of
all files inside the directory where final output is stored in for
that shell script and compares it with the one in the file holding the
related list of checksums. If everything matches, it is a successful
command, otherwise it is a failed command.

Apply this check whenever you want to validate the files' content
integrity of one or more files bit-per-bit and also one specific
layout of files.

This method, however, isn't appropriate for content that change from
one rendering to another.  For example, when you render HTML documents
from Asciidoc sources, the id value of HTML anchors is reset each time
the HTML document is rendered. This makes impossible to apply
automated tests that validate such files using an specific checksum
since the file will have a different digest each time the automated
test is executed. In such cases, the MIME validation is preferred.

== Exit Status

The exit status of *{doctitle}* command execution is the number of
failed tests it found.

== Examples

.Adding a new shell script
----------------------------------------------------------------------
$ IDFORGE_LIBRARY=Library idforge qatest -a -c ./idforge.sh ./QaTests/idforge-qatest
Creating        ./QaTests/idforge-qatest/qatest-2015010849776781980.sh
Enter integrity checks target arguments:
./idforge.sh
./idforge.sh --version
./idforge.sh --description
./idforge.sh --help
./idforge.sh
$
----------------------------------------------------------------------

.The shell script content
----------------------------------------------------------------------
#!/bin/bash
######################################################################
#
#   ./QaTests/idforge-qatest/qatest-2015010849776781980.sh
#
######################################################################

#=====================================================================
# Enter integrity checks target command:
#=====================================================================
QATEST_FLAG_COMMAND="./idforge.sh"

#=====================================================================
# Enter integrity checks target arguments:
#=====================================================================
command_line "qatest"
command_line "qatest --version"
command_line "qatest --description"
command_line "qatest --help"
----------------------------------------------------------------------

.Running available shell scripts
----------------------------------------------------------------------
$ IDFORGE_LIBRARY=Library idforge qatest ./QaTests/idforge-qatest
==================================================================
./QaTests/idforge-qatest/qatest-2015010849776781980.sh  
==================================================================
Processing      ./idforge.sh qatest
[ PASSED ]      in 0.45621 seconds
Processing      ./idforge.sh qatest --version
[ PASSED ]      in 0.245414 seconds
Processing      ./idforge.sh qatest --description
[ PASSED ]      in 0.133479 seconds
Processing      ./idforge.sh qatest --help
No manual entry for idforge-qatest
idforge (qatest): The documentation manual is not available.
[ FAILED ]      in 0.146272 seconds
==================================================================
4 tests were executed in 0.981375 seconds | 1 failed | 3 passed

[ FAILED ] Don't commit your changes yet. Fix what you broke first. 

$
----------------------------------------------------------------------

When a test passes successfully, idforge-qatest prints a PASSED string
in green color just after the command's processing line. When a test
fails, a FAILED string in red color is displayed instead, along any
message sent to standard error output. In both cases, on the right
side of the status message, it is the number of seconds the related
took to complete.

In the specific example described above, the last test does fail
because the related command (./idforge.sh qatest --help) is conceived
to be executed in the build tree, once the documentation has been
built and put in place the *man* command is aware of.  Since this test
was executed in the development tree and not in the build tree, it is
of expecting that it is considered failed because the documentation
hasn't been built in the location the *man* expects it to be, so *man*
command does send the "No Manual entry for idforge-qatest" message to
the standard error, which is correct.

After the last test has been executed, *{doctitle}* displays a
report telling the number of tests executed, the time in seconds all
tests took to complete, how many failed and how many passed.  After
the report line, *{doctitle}* concludes its execution suggesting
the action you should adopt, based on the results it found. 

Normally, when one test fails, *{doctitle}* considers the entire
testing process to be failed. Only when all tests have been passed
successfully and message has been sent to standard error output, the
entire testing process is considered to be successful. In such case,
instead, you should see a message like the following:

----------------------------------------------------------------------
[ PASSED ] You can commit your changes now. Good work!
----------------------------------------------------------------------

.Running available shell scripts based on a pattern
----------------------------------------------------------------------
$ idforge --filter="2014121344576579785" qatest ./Qatests/idforge-qatest
----------------------------------------------------------------------

== Files

======================================================================
----------------------------------------------------------------------
./QaTests/${COMMAND_NAME}/                      <1>
|-- qatest-${QATEST_TIMESTAMP}/                 <2>
|   |-- qatest-${QATEST_TIMESTAMP}.mime         <3>
|   |-- qatest-${QATEST_TIMESTAMP}.md5sum       <4>
|   |-- qatest-${QATEST_TIMESTAMP}.sha1sum
|   `-- qatest-${QATEST_TIMESTAMP}.sha256sum
`--qatest-${QATEST_TIMESTAMP}.sh                <5>
----------------------------------------------------------------------
<1> Command-specific directory
<2> Command-specific auxiliary directory
<3> Command-specific MIME integrity checks
<4> Command-specific checksum integrity checks
<5> Command-specific shell script used to initiate integrity checks
======================================================================

include::Commons/environment.inc[]

include::Commons/author.inc[]

include::Commons/bugs.inc[]

include::Commons/copyright.inc[]

include::Commons/also.inc[]

== Reference

The whole design and development process of *idforge* is driven by the
conceptual ideas described in the following books:

*Refactoring, Improving the Design of Existing*::
    by Martin Fowler
*Planning Extreme Programming*::
    by Kent Beck and Martin Fowler
*Extreme Programming Explained*::
    by Kent Beck

and websites:

- http://www.agile-process.org/
- http://www.extremeprogramming.org/
- http://martinfowler.com/

These references are frequently consulted in the hope of revising and
correcting *idforge* overall design and development process. In this
sake, *{doctitle}* plays a significant role. It is responsible of
auditing and validating the implementation of the concepts mentioned
in these references.

// vim: set syntax=asciidoc:
