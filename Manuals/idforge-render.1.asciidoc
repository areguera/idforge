= idforge-render(1)
Alain Reguera Delgado <alain.reguera@gmail.com>
idFORGE Framework =MANPAGE_VERSION=, =MANPAGE_YEAR=: =MANPAGE_DESCRIPTION=
:man source: idFORGE Framework
:man version: =MANPAGE_VERSION=
:man manual: User Commands

== Name

idforge-render - =MANPAGE_DESCRIPTION=

== Synopsis

----------------------------------------------------------------------
=MANPAGE_SYNOPSIS=
----------------------------------------------------------------------

== Description

////
The *{doctitle}* command produces images, documents and
packages as specified in configuration files.
////

The *{doctitle}* command reads configuration files to produce images
and documents in several formats and locales. Additionally, it
provides post-production actions for compressing files, archiving
files, and sending electronic mails for conclusive notifications about
the work done.

== Options

include::Commons/options.inc[]

The *{doctitle}* command reads configuration from directories
or files provided as argument in its command-line. When the arguments
are files, they are processed in the order provided, one by one. When
the arguments are directories, a recursive search is performed inside
them looking for configuration files and processed one by one in the
order they were found.

== Configuration

The *{doctitle}* command processes configuration sections from
top to bottom, using the *render-type*, *render-from*, *render-flow*
and *render-from-po* configuration options as reference to control the
initialization of content production.

render-type::
    Specifies the name of the module that will be called to initiate
    the rendition processed. When this option is not provided, the
    file extension of the first source file provided to *render-from*
    configuration option is used as default value.  When no valid
    module is found, the render module ends *idforge(1)* script
    execution with an error message. Possible values to render-type
    configuration option are the following:
+   
- "svg" -- Transforms source files in SVG format to PNG format in
  several ways using Inkscape.
- "png" -- Transforms source files in PNG format in several ways,
  using ImageMagick tools suite.
- "asciidoc" -- Transforms source files in asciidoc format to manpage,
  xhtml and pdf formats.
- "docbook" -- Transforms source files docbook format to manpage,
  xhtml and pdf formats.
- "gz" -- Compresses source files.
- "tar" -- Archives source files.
- "email" -- Sends one email for each source file provided.  The email
  messages can contain attachments and be sent either in plain, signed
  or encrypted using a combination of *gpg* and *mailx* programs.

render-from::
    Specifies one or more source files. The source files are generally
    in SVG format when you want to produce PNG images; in PNG format
    when you want to produce image compositions and image formats
    transformation; and in Asciidoc or Docbook format when you want to
    produce documentation.  This option accepts absolute, relative
    paths, and shell expansion as value.

render-flow::
    Specifies the rendition flow used to process the source files
    provided as value to *render-from* configuration option. The value
    of this option varies based on the type of source file being
    processed. For example, when you are processing SVG files,
    possible values to this option include "base", "extended", and
    "media"; when you are processing Asciidoc files, possible values
    to this option include "manpage", "article", "book"; when you are
    processing PNG files, possible values to this option include
    "base" and "indexed"; when you are processing emails, possible
    values to this option include "plain", "sign", and "cryptic".

render-from-po::
    Specifies one or more translation files in PO format. This option
    accepts absolute, relative paths, and shell expansions as value.

The *{doctitle}* command controls content localization based on
the number of files provided to both *render-from* and
*render-from-po* configuration options. Based on the number of files
provided to these options, one of the following localization routes is
taken:

- Process source files without localization -- When *render-from* is
  provided but *render-from-po* is not, the source files are not
  subject to localization. Only source file instance expansions
  performed by the xml module take place.

- Process source files with localization in one-to-one relation --
  When the same number of files are provided both in *render-from* and
  *render-from-po* configuration options, this command processes them
  in an one-to-one relation. In this case the first translation file
  holds the translatable strings retrieved from the first source file,
  the second translation file holds translatable strings retrieved
  from the second source file, and so on for each source and
  translation file provided in the same configuration section.

- Process source files with localization in many-to-one relation --
  When the number of files provided to *render-from* is greater than
  the number of files provided to *render-from-po* option, this
  command processes them in a many-to-one relation. In this case the
  first translation file contains the translatable strings retrieved
  from all the source files provided in the same configuration
  section.

The *{doctitle}* command controls the final output location
based on the following configuration options:

render-directory::
    Specifies the directory where final content will be stored in.
    When this option is not provided, this command stores final
    content in a directory named "Final". The Final directory is
    created in the same location where the configuration file being
    currently processed is stored in.

render-file::
    Specifies the path of the final file. When this option is not
    provided, the section name and the *render-directory*
    configuration option are used as base to create the final file
    path, being the section name the name of the file and the value of
    *render-directory* the directory where the file will be stored.

render-logic::
    Specifies the action taken against the final directory before
    producing content inside it. Possible values to this option are
    "overwrite" to replace the present content and "remove-first" to
    remove the final directory before writing any file inside it.
    When this option is not provided, "overwrite" is used as default
    value.

[[images]]
=== Images Construction

The *{doctitle}* command initiates image construction when
*render-type* is set either to "svg" or "png".

When *render-type* is set to "svg", the *render* module executes the
"svg" module which gives immediate control to *xml* module. The xml
module firstly evaluates whether the *render-from-po* configuration
option was provided or not in the configuration section and creates
the source file instance based on it. Later, it expands translation
markers inside the source file instance, as specified by the following
configuration options:

xml-expand::
    Specifies the translation marker and the associated value that
    will be expanded in the source file instance. The value of this
    option must be provided using the "=\MARKER=VALUE" format.  Where
    "=\MARKER=" is the translation marker you want to expand and
    "VALUE" the associated information that replaces the marker string
    in the moment of the expansion.  To perform several expansions,
    you can provide this option several times in the same
    configuration section or you can provide a single option with
    several translation markers definitions on it.  When you provide
    several translation markers as value to a single option,
    translation markers should be set using one or more spaces as
    separator.
+
You can use the *xml-expand* configuration option to introduce dynamic
information in the source file instances. For example, you can run the
date command through a shell command expansion construction here to
pass the current time information, or do more elaborated things. See
<<example-rendering-documentation>>.

xml-expand-background::
    Specifies the path of the background image (in PNG format
    preferably) that will be expanded in place of =\BACKGROUND_IMAGE=
    translation marker in the source file instance.  This option is
    only useful when you've set such a marker in the SVG files.

Once all modifications have been applied to the source file instance,
the *svg* module takes control and verifies the absolute paths set
inside the source file instance through (e.g., xml-expand-background
configuration option). These paths are normally expanded dynamically
as value of "<image xlink:href" definitions in the source file
instance once it has been created by *xml* module. These paths must
point to valid images and be named in the "${WDIGHT}x${HEIGHT}" form
(e.g., "1600x1200.png").

When the *xml-expand-background* configuration option is specified but
the file it points to doesn't exists, the *svg* module tries to find
the closest candidate available in the same directory of the image you
specified in the configuration option and creates a cropped version of
it using the image dimensions specified in this option (that's why the
image file name must be in the form ${WDIGHT}x${HEIGHT}).  If no
background image is available for cropping either, a plain color image
is created and used instead.

Once file paths verification has been done, the *svg* module evaluates
the value provided to *svg-flow* configuration option to determine the
kind of rendition it will perform to produce the final PNG files from
the source file instance.

svg-flow::
    Specify svg rendition flow used to produce final PNG files from
    source file instances in SVG format.  Possible values to this
    option include "base" (default), "extended", or "media".  When the
    base rendition flow is used, each source file instance produces
    only one PNG file. In extended and media rendition flows, each
    source file instance can produce one or more PNG images based on
    the information provided to *svg-flow-options* configuration
    option. See <<images-svg-flow-extended>> and
    <<images-svg-flow-media>> for more information about extended and
    media rendition flows, respectively.

svg-flow-options::
    Specifies options for svg rendition flow. The format of the value
    provided to this option depends on the value specified to
    *svg-flow* configuration option. When the rendition flow is set to
    "extended", the format of svg-flow-option is
    "HEIGHTS:FGCOLORS:BGCOLORS" (see description at
    <<images-svg-flow-extended>>). When the rendition flow is set to
    "media", the format of svg-flow-option is
    "RELEASES:ARCHITECTURES:MEDIA*NUMBER" (see description at
    <<images-svg-flow-media>>).

Once the SVG source file instances were exported to PNG files, the
*svg* module verifies the value of *svg-enable-siblings* configuration
option to determine whether to give control to other module or not.
Normally, *svg-enable-siblings* is set to an empty value, so *svg*
doesn't give control to any module.

In case you want to modify the PNG files already produced in some way
(e.g., create copies in other image formats, branding the final image,
etc.), you can create a new configuration section for it, or you can
set the *svg-enable-siblings* configuration option to "png" in order
to call the *png* module directly from *svg* module once it has
completed its job.  In either case, you can control the *png* module
through the following configuration options:

png-flow::
    Specify png rendition flow. By default this value is set to "base"
    which process every PNG images found in the output directory one
    by one. Other values this option can take include "indexed" in
    case you want to produce images with reduced number of colors. The
    "indexed" flow requires you to specify a palette of colors as
    produced by GIMP in the *png-indexed-gpl* configuration option.
    See <<images-png-reduce-colors>>.

png-indexed-gpl::
    Specifies the file holding the palette of colors that will be used
    to reduce the image colors. This file uses the palette's comment
    field to set the color information in hexadecimal representation.
    See <<palette-of-colors>>. If the palette you provide doesn't
    include the hexadecimal representation of colors in the comment
    field, the color transformation will fail and *png* module will
    terminate *idforge(1)* execution with an error message.

png-base-command::
    Specifies a command-line that will be applied in the configuration
    section context. Normally, in this context, you need to specify
    either RENDER_FROM_FILE or RENDER_FILE environment variables in
    the command-line in order to make reference to the source file
    provided as value to *render-from* configuration option or the
    final image file the configuration section will produce,
    respectively. When several source files are provided as value to
    render-from configuration option, the command you provide as value
    to *png-base-command* will be applied to each single source file
    provided, one by one.

png-base-composition::
    Specifies image branding on source files provided as value to
    *render-from* configuration option.  The value of this option has
    the form "FILENAME:GEOMETRY", where "FILENAME" is the absolute
    path to the PNG image you want to apply as brand and, "GEOMETRY"
    takes the form "xHEIGHT+X+Y". In order to apply any brand
    information to final images correctly, the brand image you want to
    apply must be available somewhere. In case they don't exist, the
    *png* module will end *idforge(1)* execution with an error
    message.

png-base-comment::
    Specifies image commenting on source files provided as value to
    *render-from* configuration option.

png-base-exports::
    Specifies image formats you want to create for the source files
    provided as value to *render-from* configuration option. The
    values specified in this option are separated by white space and
    must be supported by ImageMagick tool set.  When this variable is
    not provided or set in the configuration file, the *png* module
    will not create any copies of the final PNG image in different
    formats.
+
[TIP]
======================================================================
To see the list of possible image formats supported by ImageMagick
tool set, you can run the following command: _identify -list format_.
======================================================================

[[documents]]
=== Documents Construction

The *{doctitle}* command initiates document construction when
*render-type* is set either to "asciidoc" or "docbook".

When *render-type* is set to "asciidoc", the *render* module executes
the *asciidoc* module. The asciidoc module expects you to provide an
asciidoc file as value to *render-from* in order to transform it to a
source file instance in docbook format based on the type of document
specified to *render-flow* configuration option (e.g., "manpage",
"article" or "book").

When the source file instance in docbook format is available, the
asciidoc module calls the *xml* module to perform content localization
as specified by *render-from-po* configuration option and expand the
translation markers as specified by *xml-expand* configuration option.
Once the modifications has been applied to asciidoc source file in
docbook format, the asciidoc module takes control again and calls the
docbook module to perform the final transformation as specified by
*render-formats* configuration option (e.g., "manpage", "xhtml",
"pdf").

[NOTE]
======================================================================
The render-formats must be provided consequently with the render-flow
specified in the configuration section.  For example, the article and
book document types can be produced in both xhtml and pdf formats but
not in manpage format.  However, manpage document types can be
produced in manpage, xhtml and pdf formats.
======================================================================

When several formats for final document transformations are provided
as value to *render-formats* the docbook module uses the system's
default xsl style sheets stored in the directory
/usr/share/sgml/docbook/xsl-stylesheets to process them accordingly.
In case you want to customize the final output using your own xsl
style sheet, you can use the *render-from-xsl* configuration options.
The value of this option is applied without any sort of distinction to
all render-formats and render-flow values provided in the
configuration section.

=== Compressing Files

The *{doctitle}* command initiates file compression when
*render-type* is set to "gz" and one or more files are provided as
value to *render-form* configuration option. 

When *render-type* is set to "gz", the *render* module calls the *gz*
module which passes all the source files provided as value to
render-from as argument to /bin/gzip for their compression. In case
you want to provide options to this command (none is provided by
default), or set a different compression command (e.g.,
/usr/bin/bzip2, /usr/bin/zip, etc.), you can do so through the
*gz-command* configuration option.

=== Archiving Files

The *{doctitle}* command initiates files archiving when
*render-type* is set to "tar" and one or more files are provided as
value to *render-form* configuration option.

When *render-type* is set to "tar", the *render* module calls the
*tar* module which builds a list of all source files provided as value
to *render-from* configuration option and copies them to a temporal
directory in order to create an archive it and all its content.
Normally, the name of the archive and the directory inside it are
defined by the configuration section name. The archiving command and
its command-line options are controlled through the following
configuration options:

tar-command::
    Specifies the command that will be used to create the archive.
    When this option is no provided, the /usr/bin/tar command is used
    as default.
tar-options::
    Specifies options that will be pass to the archiving command. When
    this option is not provided it assumes the archiving command is
    /usr/bin/tar and the options it provides are "--remove-files
    -capf". Note here how the *-f* option has been put at the end of
    the options list. This is intensional so the file name of the
    final archive file could be provided just after it. If you change
    the options, you need to be sure that the last option provided in
    the list of options is the one introducing the final archive file
    name or path.  This is necessary in order for the final
    command-line to work as expected.

The final archive is created in the same directory of the
configuration file being processed and using the configuration section
name as archive file name, or in a customized location if either
*render-directory* or *render-file* configuration option is provided.
In either case, if you didn't changed the default archiving
command-line, you can compress the final archive file by adding the
*.tar.gz* or *.tar.bz2* prefix to it (note the presence of tar's *-a*
option in the default list of options).  Compressing the final archive
this way is much more efficient than opening a new configuration
section just for that purpose.

=== Sending Electronic Mails

The *{doctitle}* command sends electronic mails when
*render-type* is set to "email" and one or more files are provided as
value to *render-form* configuration option. In this context, the
*render* module calls the *email* module to build an email message for
each source file provided as value *render-from* configuration option
using the source file content as message body and the following
configuration options to control the way such messages are delivered:

render-flow::
    Specifies how to send the emails. Possible values to this option
    are the following:
    +
- "plain" -- Sends both email body and its attachments as they were
  provided. When *render-flow* is not provided, it takes plain as
  default value.
- "sign" -- Sends both email body and its attachments signed using the
  first key found in the secret keyring before sending them to the
  SMTP server. Here, the body is signed using an ASCII armored output
  while attachments are signed individually, using detached
  signatures.
- "cryptic" -- Sends both email body and its attachments encrypted
  using the first key found in the secret keyring before sending them
  to the SMTP server. Here, the body is encrypted using an ASCII
  armored output while attachments are encrypted individually, using
  the binary OpenPGP format.

email-host::
    Specifies the SMTP server where the email message will be sent to.
    When this configuration option is not provided, the "localhost" is
    used as default SMTP server.
email-auth::
    Sets the SMTP authentication method.  If set to "login", or if
    unset  and  *email-auth-user*  is  set,  AUTH LOGIN is used.  If
    set to "cram-md5", AUTH CRAM-MD5 is used; if set to "plain", AUTH
    PLAIN is used.  Otherwise, no SMTP authentication is performed
    which is the default behaviour.
email-auth-user::
    Sets the SMTP authentication username. By default this option is
    set to an empty value.
email-auth-pass::
    Sets the SMTP authentication password. By default this option is
    set to an empty value.
email-from::
    Specifies the address to put into the "From:" field of the message
    header. When this option is not provided, it takes the current
    user name that *idforge(1)* was executed by and "localhost" as
    reference to build an email address (e.g., if you are using "foo"
    as username, the resultant email address would be "foo@localhost".
email-rcpt::
    Specifies the address (or a list of addresses) to put into the
    "To:" field of the message header. When you enter several
    addresses here, they must be separated by comma (,) and no space
    must be present between them. When this option is not provided, it
    takes the current user name that *idforge(1)* was executed by and
    "localhost" as reference to build an email address (e.g., if you
    are using "foo" as username, the resultant email address would be
    "foo@localhost".
email-subject::
    Specifies the string to put into the "Subject:" field of the
    message header. When this option is not provided, the name of the
    configuration section being currently processed is used as default
    value.
email-attachment-limit::
    Specifies the attachment maximum size in bytes. When this option
    is not provided 30000 bytes are used as default value.
email-attachment::
    Specifies the file (or list of files) you want to attach to the
    outgoing message. 
+   
[CAUTION]
======================================================================
When several files are provided to *render-from* configuration option,
a copy of the attachments you provide here are sent for each outgoing
message, individually.
======================================================================

////
[[packages]]
=== Packaging Files
...
////

[[dependencies]]
== Dependencies

Dependencies are present when you need to produce one or more specific
files first in order to be able of producing another one based on them
later (e.g., when you are branding an image, the image holding the
brand itself must be produced before you creating the image you want
to put the brand on).  In theses cases, you should grant a production
order consequent with the components of the final image you want to
build.  In this context, graphic designers get focused on one
component at a time and in producing it well, and let people writing
configuration file to gear the pieces all together. See
<<images-svg-flow-media>>.

When you manage content dependencies this way you are improving the
maintainability and consistency of the final work. It allows to
concentrate design models in a single location and make references to
them from different visual manifestation's configuration file.  This
way it is possible to introduce changes to design models and propagate
them quickly to all visual manifestations' images by running a single
command.

The process of managing content dependencies was initially conceived
inside the *idforge-prepare(1)* command but it made the preparation
process too long, resource expensive and not all rendered images were
always used in each single interaction of *idforge-render* command.
So, these issues led to change the perspective about rendering
dependencies inside *idforge(1)* automation scripts from the
workstation preparation process up to the process of writing
configuration files.

== Examples

[[palette-of-colors]]
.Palette of colors
----------------------------------------------------------------------
GIMP Palette
Name: 640x480.png-16colors
Columns: 16
#
  1   4  14	01040e
  1   6  22	010616
  0   7  27	00071b
  0   8  32	000820
  0   9  36	000924
  1   9  42	01092a
  0  11  47	000b2f
  0  11  53	000b35
  0  13  59	000b35
  2  13  63	020d3f
  0  16  73	020d3f
  0  18  82	001252
  1  20  90	01145a
  0  23  99	001763
  0  27 113	001b71
  0  27 113	001b71
----------------------------------------------------------------------

.Rendering PNG images (base)
----------------------------------------------------------------------
[715x940.png]
render-from          = "${PWD}/QaTests/idforge-render/qatest-commons/Models/Images/document-background.svg"
render-directory     = "${PWD}/QaTests/idforge-render/qatest-2015012847797252944/Final"
svg-flow             = "base"
----------------------------------------------------------------------

[[images-svg-flow-extended]]
.Rendering PNG images (extended)
----------------------------------------------------------------------
[idforge-symbol.png]
render-from          = "${PWD}/QaTests/idforge-render/qatest-commons/Models/Images/idforge-symbol.svg"
render-directory     = "${PWD}/QaTests/idforge-render/qatest-2015012847797252944/Final"
svg-flow             = "extended"
svg-flow-options     = "48 724:ffffff-0.3 24221c-1 d4aa00-1 88aa00-1 d45500-1 a02c2c-1 2c5aa0-1:ffffff-0"
----------------------------------------------------------------------

When *render-type* points to "svg" and *svg-flow* is set to
"extended", the *svg* module calls the *extended* module which exports
PNG images with different heights, foreground color, background color
and opacity information from each source file instance provided as
value to *render-from* configuration option. These parameters are
controlled by the *svg-flow-options* configuration option. The value
passed to this option must have the "HEIGHTS:FGCOLORS:BGCOLORS"
format, where:

HEIGHTS::
    Specifies one or more image heights (in pixels) to export the
    source file instances from SVG to PNG format. When no height is
    provided to this option, only one image with 48 pixels of height
    is be produced.
FGCOLORS::
    Specifies one or more foreground colors and the related opacities
    you want to use to export the source file instances from SVG to
    PNG format. For this option to take effect objects must be filled
    with black color (e.g., 000000), otherwise no color replacement
    will take place.  Possible values to this variable take the form
    "XXXXXX-Y", where "XXXXXX" represent a color in hexadecimal format
    and the final "Y" must be 1 for full opacity, 0 for full
    transparency, or any intermediate value. When this variable is not
    provided, final images are rendered using black foreground and
    full transparency (e.g., 000000-1).
BGCOLORS::
    Specifies one or more background colors and the related opacity
    you want to use to export the source file instances from SVG to
    PNG format.  Possible values to this variable take the form
    "XXXXXX-Y", where "XXXXXX" represent a color in hexadecimal format
    and the final "Y" must be 1 for full opacity, 0 for full
    transparency, or any intermediate value. When this variable is not
    provided, final images are rendered using black foreground and
    full transparency (e.g., 000000-1).

.Rendering PNG images (indexed)
----------------------------------------------------------------------
[640x480-indexed.png]
render-from          = "${PWD}/QaTests/idforge-render/qatest-20150211182206285536962/Final/640x480.png"
render-directory     = "${PWD}/QaTests/idforge-render/qatest-20150211182206285536962/Final/"
png-flow             = "indexed"
png-indexed-gpl      = "${PWD}/QaTests/idforge-render/qatest-commons/Backgrounds/1600x1200.png-16colors.gpl"
----------------------------------------------------------------------

[[images-png-reduce-colors]]
.Rendering LSS16 images (indexed)
----------------------------------------------------------------------
[640x480.lss]
render-from          = "${PWD}/QaTests/idforge-render/qatest-20150211182206285536962/Final/640x480.png"
render-directory     = "${PWD}/QaTests/idforge-render/qatest-20150211182206285536962/Final/"
png-flow             = "indexed"
png-indexed-gpl      = "${PWD}/QaTests/idforge-render/qatest-commons/Backgrounds/1600x1200.png-16colors.gpl"
----------------------------------------------------------------------

When *render-from* points to a PNG image and *png-flow* is set to
"indexed", the *png* module uses the palette of colors provided as
value to *png-indexed-gpl* configuration option and reduces de number
of colors of the image provided as value to *render-from* based on it.
The format of the palette of colors file must be as specified in
<<palette-of-colors>>.

Once the indexed image has been produced, the *indexed* module
evaluates the section name. If the section name ends with *.lss*, the
*indexed* module calls the *lss* module to create a copy of the
indexed image in LSS16 format and the respective splashtolss.sh shell
script. Otherwise, the *png* module gives control to the module that
did call it.

Getting good quality images with reduced number of colors may be a
challenging endeavour, specially if the original image you are working
with has colors with too distant chromatic levels. When you are
creating images with reduced number of colors, the following
recommendations may result useful:

- Create monochromatic PNG images whenever you want to create images
  with reduced number of colors. This increases the number of colors
  that can be reused in a restricted map of colors which allows to
  achieve more details. This is very useful when the images you are
  producing with reduced number of colors are already limited by the
  number of colors of another image (e.g., your organization's brand).

- Use GIMP Indexed feature to reduce the number of colors of the image
  you want to produce and create the palette of colors you need to
  provide as value to *png-indexed-gpl* configuration option in order
  to reduce the image color information.

- When you cannot create monochromatic PNG images, you could pick a
  big resolution image from the artistic motif you need to base the
  indexed image and crop a portion of it to the dimensions you need.
  When you do this, you keep the graphic design pattern and reduce the
  number of colors to a specific area of it with closer number colors
  than the entire design.  With less different chromatic values in the
  image subject to color reduction, the final result should show more
  details than otherwise.

When images with reduced number of colors are branded with other
image, you must be sure that the color information of the image used
for branding is also considered in the final palette of colors you
provided as value to *png-indexed-gpl* configuration option. This is
necessary in order for the final indexed images to print the brand
color information correctly. In these cases, however, you may notice
an undesirable noise made of pixels with different colors over the
branding image area.  Certainly, these pixels shouldn't be there. They
affects the brand information you transmit with your final images.

When pixels of different colors are spread over the branding image
area, you must retouch the final indexed image using GIMP until the
noise is entirely removed from it.  The easiest and preferable way of
doing brand retouching is using GIMP brushes specially conceived for
that purpose (e.g., the branding brushes are indexed images as well).
In this sake, organizations interested in making their brand
propagation a community effort distribute branding brushes in several
sizes so graphic designers can implement more precise image
corrections based on them.

[[example-rendering-documentation]]
.Rendering documentation
----------------------------------------------------------------------
[idforge-render.1]
render-type         = "asciidoc"
render-flow         = "manpage"
render-from         = "${PWD}/Manuals/${CONFIG_SECTION}.asciidoc"
render-from-po      = "${PWD}/Manuals/Locales/${IDFORGE_LANG_LC}/${CONFIG_SECTION}.po"
render-formats      = "manpage"
xml-expand          = "=\MANPAGE_VERSION=${IDFORGE_VERSION}"
xml-expand          = "=\MANPAGE_SYNOPSIS=$(${0} render | head -n 1 | sed -r 's,^.+(idforge),\1,')"
xml-expand          = "=\MANPAGE_DESCRIPTION=$(${0} render --description)"
xml-expand          = "=\MANPAGE_YEAR=$(date '+%Y')"
xml-expand          = "=\MANPAGE_OTHERS=$(cd ./Manuals; OTHERS=$(ls *.asciidoc | grep -v ${CONFIG_SECTION} | sed -r 's/\.([[:digit:]])\.asciidoc/(\1),/'); echo ${OTHERS} | sed 's/,$//')"
----------------------------------------------------------------------

[[file-compression]]
.Compressing file already produced
----------------------------------------------------------------------
[idforge-render.1.gz]
render-type         = "gz"
render-from         = "${PWD}/Manuals/Final/${IDFORGE_LANG_LC}/idforge-render.1"
render-directory    = "${PWD}/Manuals/Final/${IDFORGE_LANG_LC}"
----------------------------------------------------------------------

[[file-archiving]]
.Archiving files already produced
----------------------------------------------------------------------
[archive-1.0]
render-type     = "tar"
render-from     = "$(find ${PWD}/QaTests/idforge-render/qatest-2015011135476500711/Final/Customized -type f)"
render-file     = "${PWD}/QaTests/idforge-render/qatest-2015011135476500711/Final/${CONFIG_SECTION}.tar.gz"
----------------------------------------------------------------------

[[example-sending-electronic-mail]]
.Sending electronic mails
----------------------------------------------------------------------
[send_plain_mail_using_mailx]
render-type      = "email"
render-flow      = "plain"
render-from      = "${PWD}/QaTests/idforge-render/qatest-2015011135476500711/Final/Customized/${IDFORGE_LANG_LC}/manpage.1.html"
email-attachment = "${PWD}/QaTests/idforge-render/qatest-2015011135476500711/Final/Customized/${IDFORGE_LANG_LC}/manpage.1.pdf"
email-attachment = "${PWD}/QaTests/idforge-render/qatest-2015011135476500711/Final/archive-1.0.tar.gz"

[send_signed_mail_using_mailx_and_gpg]
render-type      = "email"
render-flow      = "sign"
render-from      = "${PWD}/QaTests/idforge-render/qatest-2015011135476500711/Final/Customized/${IDFORGE_LANG_LC}/manpage.1.html"
email-attachment = "${PWD}/QaTests/idforge-render/qatest-2015011135476500711/Final/Customized/${IDFORGE_LANG_LC}/manpage.1.pdf"
email-attachment = "${PWD}/QaTests/idforge-render/qatest-2015011135476500711/Final/archive-1.0.tar.gz"

[send_encrypted_mail_using_mailx_and_gpg]
render-type      = "email"
render-flow      = "cryptic"
render-from      = "${PWD}/QaTests/idforge-render/qatest-2015011135476500711/Final/Customized/${IDFORGE_LANG_LC}/manpage.1.html"
email-attachment = "${PWD}/QaTests/idforge-render/qatest-2015011135476500711/Final/Customized/${IDFORGE_LANG_LC}/manpage.1.pdf"
email-attachment = "${PWD}/QaTests/idforge-render/qatest-2015011135476500711/Final/archive-1.0.tar.gz"
----------------------------------------------------------------------

[[images-svg-flow-media]]
.Managing dependencies to produce installation media images
----------------------------------------------------------------------
[idforge-logo.png]
render-from             = "${PWD}/QaTests/idforge-render/qatest-commons/Models/Images/idforge-logo.svg"
render-logic            = "remove-first"
svg-flow                = "extended"
svg-flow-options        = "48:ffffff-1:ffffff-0"

[idforge-symbol-bg.png]
render-from             = "${PWD}/QaTests/idforge-render/qatest-commons/Models/Images/idforge-symbol.svg"
svg-flow                = "extended"
svg-flow-options        = "724:ffffff-0.3:ffffff-0"

[715x940.png]
render-from             = "${PWD}/QaTests/idforge-render/qatest-commons/Models/Images/document-background-inner.svg"
svg-flow                = "extended"
svg-flow-options        = "940:e3e2db-1:ffffff-0"
svg-enable-siblings     = "png"
png-flow                = "base"
png-base-composition    = "ffffff-0/ffffff-0.3/724/idforge-symbol-bg.png:x724+275+166"

[document-copyright.png]
render-from             = "${PWD}/QaTests/idforge-render/qatest-commons/Models/Images/document-copyright.svg"
render-from-po          = "${PWD}/QaTests/idforge-render/qatest-commons/Models/Images/Locales/${IDFORGE_LANG_LC}/document-copyright.po"
svg-flow                = "extended"
svg-flow-options        = "990:24221c-1:ffffff-0"
xml-expand              = "=PRODUCT_NAME=idFORGE"
xml-expand              = "=COPYRIGHT_YEAR=$(date +%Y)"
xml-expand              = "=COPYRIGHT_HOLDER=The CentOS Artwork SIG"
xml-expand              = "=IDFORGE_VERSION=${IDFORGE_VERSION}"
xml-expand              = "=LICENSE=Free Art 1.3 License"

[765x990.png]
render-from             = "${PWD}/QaTests/idforge-render/qatest-commons/Models/Images/document-background.svg"
svg-flow                = "base"
svg-enable-siblings     = "png"
png-flow                = "base"
png-base-composition    = "ffffff-0/e3e2db-1/940/715x940.png:x940+25+25"
png-base-composition    = "${IDFORGE_LANG_LC}/ffffff-0/24221c-1/990/document-copyright.png:x990+0+0"

[443x443.png]
render-from             = "${PWD}/QaTests/idforge-render/qatest-commons/Backgrounds/640x480.png"
png-flow                = "base"
png-base-command        = "convert -extract 443x443+0+0 +repage ${RENDER_FROM_FILE} ${RENDER_FILE}"

[443x443-branded.png]
render-from             = "443x443.png"
png-flow                = "base"
png-base-composition    = "ffffff-0/ffffff-1/48/idforge-logo.png:x48+96+80"

[document-media.png]
render-from             = "${PWD}/QaTests/idforge-render/qatest-commons/Models/Images/document-cd-label.svg"
render-from-po          = "${PWD}/QaTests/idforge-render/qatest-commons/Models/Images/Locales/${IDFORGE_LANG_LC}/document-cd-label.po"
xml-expand-background   = "${PWD}/QaTests/idforge-render/qatest-2015012847797252944/Final/765x990.png"
xml-expand              = "=PRODUCT_NAME=idFORGE"
xml-expand              = "=BACKGROUND_IMAGE_CD=${PWD}/QaTests/idforge-render/qatest-2015012847797252944/Final/443x443.png"
svg-flow                = "media"
svg-flow-options        = "0.1 0.1.2:i686 x86_64:DVD*2 CD*4"
----------------------------------------------------------------------

This example describes how to manage the image dependencies needed to
brand an image that has been previously cropped from a higher one and
then used as background to produce installation media images. This is
a fundamental construction in order to build branded background images
for different visual manifestations based on the same artistic motif.

When the *render-type* option is set to "svg" and *svg-flow* is set to
"media", *idforge-render* enters in installation media rendition mode.
In this mode, it produces several PNG images based on release numbers,
architectures, type of media and the number needed to cover an
specific distribution. To specify this information, you need to
provide the following value "RELEASES:ARCHITECTURES:MEIDA*NUMBER",
where the colon character (:) is a field separator and the individual
fields have the following meaning:

RELEASES::
    Specifies the release numbers you want to produce installation
    media for (e.g., "5.10 6.5 7.1").
ARCHITECTURES::
    Specifies the architectures you want to produce installation media
    for (e.g., "i686 x86_64").
MEDIA*NUMBER::
    Specifies the type of media and the number of them you want to
    produce image for (e.g., "DVD*2 CD*6").

include::Commons/environment.inc[]

include::Commons/author.inc[]

include::Commons/bugs.inc[]

include::Commons/copyright.inc[]

include::Commons/also.inc[]

// vim: set syntax=asciidoc:
