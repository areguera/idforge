= idforge-render(1)
Alain Reguera Delgado <alain.reguera@gmail.com>
=MANPAGE_YEAR=:

== Name

idforge-render - =MANPAGE_DESCRIPTION=

== Synopsis

----------------------------------------------------------------------
=MANPAGE_SYNOPSIS=
----------------------------------------------------------------------

== Description

*idforge-render* creates the documentation and packages your
organization needs to describe and implement its own visual identity
on top of CentOS GNU/Linux distribution. Initially, the documentation
is organized in several chapters with examples you must change based
on your own organization visual identity. The packages, on the other
hand, don't need you to make any changes because they are based on
already customized models ready to build. To make this possible, you
need to provide a PNG image describing your organization visual style
and your organization brads as well. See <<files>>, for more
information about where you must put this information.

== Options

*idforge-render* accepts the following options:

include::Commons/options.inc[]

== Configuration

*idforge-render* reads configuration files provided as argument in the
command-line to produce content in different ways, based on the
following configuration options:

render-from::
    Specifies the source file that will be used as input. This file is
    generally in SVG format when you want to produce PNG images, and
    in Asciidoc format when you want to produce documentation.  This
    option accepts absolute, relative paths, and path expansion.
    Several option definitions are possible in one configuration
    section.

render-from-po::
    Specifies the source file translation in PO format. Two possible
    file relation are possible here. The first file relation is when
    the same number of source files and translation files are
    provided. In this case, the translation files are applied to to
    source files in the same order they are provided. The second file
    relation is when there are more source files than translation
    files. In this case, all the source files are affected by the
    first translation file provided and other translation files
    aren't considered.
+
When *render-from-po* isn't provided, it set to an empty value, or it
points to malformed PO file, the final content will not be localized.
To create, edit, or remove the translation file specified by this
option, use *idforge-locale(1)* command.

render-directory::
    Specifies the directory where final content will be stored in.
    When this option is not provided, *idforge-render* stores final
    content in a directory named Final. The Final directory is created
    in the same location where the configuration file being currently
    executed is stored in.

render-file::
    Specifies the path of the final file. When this option is not
    provided, the section name and the render-directory are used as
    base to create the final path, being the section name the name of
    the file and the value of render-directory the directory where the
    file will be stored.

render-type::
    Specifies the name of the module that will be called to initiate
    the rendition processed. When this option is not provided, the
    file extension of the first source file is used as default value.
    Some of the possible values to this option include "svg" to
    process vectorial images, "png" to process raster images, and
    "asciidoc" to process documentation.

render-logic::
    Specifies the action taken against the final directory before
    producing content inside it. Possible values to this option are
    "overwrite" to replace the present content and "remove-first" to
    remove the final directory before writing any file inside it.
    When this option is not provided, "overwrite" is used as default
    value.

[[rendering-images]]
=== Processing configuration files for producing images

When *render-type* is set to "svg", *iforge-render* reads the value of
*render-from*, *render-from-po* and enters in xml rendition to create
the source files' instances that will be used to render the final
files. These instances are then target for content localization and
translation marker expansions. Content localization take place when a
PO file is provided as value to *render-from-po* configuration option.
Translation marker expansions take place when one of the following
configuration options are provided:

xml-expand::
    Specifies the translation marker and the associated value that
    will be expanded in the source file's instance. The value of this
    option must be in the "=\MARKER=VALUE" format.  Where "=\MARKER="
    is the translation marker you want to expand and "VALUE" the
    associated information that replaces the marker string.  To
    perform several expansions, you can provide this option several
    times in the same configuration section or you can provide a
    single option with several translation markers definitions on it.
    When you provide several translation markers as value to a single
    option, translation markers should be set using one or more spaces
    as separator.
+
You can use this option to introduce dynamic information to source
file instances. For example, you can use the shell command expansion
construction here to pass the current time information, or do more
elaborated things.

xml-expand-background::
    Specifies the background image path that will be expanded when the
    =\BACKGROUND_IMAGE= translation marker is found in the source file
    instance.  This must be an image file (PNG preferably) with
    exactly the same dimensions used to produce the source file in SVG
    format. When you specify this option but the background image is
    not found in where you specified, this option tries to find the
    closest candidate available in the same directory of the image you
    provided and creates a cropped version of it using the image
    dimensions specified in this option.  If no background image is
    available for cropping, a plain color image is used instead.

When the list of source file instances have been localized and
translation markers expanded, *idforge-render* returns to svg
rendition to build the command-line that will be used to export the
source file instances into PNG format, using Inkscape for that. This
process can be controlled by the following configuration options:

svg-export-id::
    Specifies what area to export. When this option is not provided,
    the entire drawing area is considered for exportation. Otherwise,
    only the object (and all objects inside it) which id coincides
    with the one specified as value to this option will be considered
    for exportation.

svg-flow::
    Specify whether the svg rendition enters in "base" (default),
    "extended", or "media" mode.  In base mode, each source file
    instance produces only one PNG file. In extended and media mode,
    each source file instance can produce one or more PNG images based
    on the information provided by *svg-flow-options*.

Once all source file instances have been exported to PNG files, the
svg module verifies the value of *svg-enable-siblings* configuration
option to determine whether to give control to png module or not. By
default this option is set to an empty value and svg doesn't give
control to png module. So, if you want modify the PNG files already
produced in some way, you need to set this option to "png" in the
configuration section of the associated image.  If you do so, you can
control the png module based on the following configuration options:

png-flow::
    Specify the rendition flow of png module. By default this value is
    set to "base" which process every PNG images found in the output
    directory one by one. Other values to this option include
    "indexed" in case you want to produce images with reduced number
    of colors. The "indexed" flow requires you to specify a palette of
    colors as produced by GIMP in the *png-indexed-gpl* configuration
    option.

png-base-command::
    Specifies a command-line that will be applied in the configuration
    section context. Through this option you can execute arbitrary
    commands to RENDER_FROM_FILE and RENDER_FILE configuration section
    environment variables. These variables point to input files set as
    value to *render-from* option and the final file, respectively.
    You can provide several command-lines in a single section whenever
    they are correctly separated with a semi-colon (";") after each
    command-line you enter.

png-base-composition::
    Specifies the branding image you want to apply on files provided
    as value to render-from option.  The value of this option has the
    form "FILENAME:GEOMETRY", where "FILENAME" is the absolute path to
    the PNG image you want to apply as brand and, "GEOMETRY" takes the
    form "xHEIGHT+X+Y". In order to apply brand information to final
    images correctly, the brand images you want to apply must be
    available. In case they don't exist, *idforge-render* ends its
    execution with an error message.

png-base-comment::
    Specifies the comment you want to apply on files provided as value
    to render-from option.  This information is written internally on
    the image properties and is only visible on formats like PNG that
    support comments internally.

png-base-exports::
    Specifies the image formats you want to create copies for using
    the files provided as value to render-from option. The values
    specified in this option are separated by white space and must be
    supported by ImageMagick tool set.  When this variable is not
    provided or set in the configuration file, the *idforge-render*
    command will not create copies of the final PNG image in different
    formats.
+
[TIP]
======================================================================
To see the list of possible image formats supported by ImageMagick
tool set, you can run the following command: _identify -list format_.
======================================================================

[[different-heights-colors-and-opacity]]
==== Changing heights, colors and opacity

When *render-type* points to "svg" and *svg-flow* is set to
"extended", *idforge-render* enters in svg extended rendition mode.
In this mode, each file provided as value to render-from can be
produced with different heights, foreground color, background color
and opacity information. These parameters are controlled by
the *svg-flow-options* option. In svg extended mode, the value of this
option must be "HEIGHTS:FGCOLOR:BGCOLOR", where:

HEIGHTS::
    Can be one or more number specifying the export heights in pixels
    you want to create copies of the final image. The values specified
    in this option are separated by white space. When no value is
    provided to this option, only one image of 48 pixels will be
    produced.

FGCOLOR::
    Can be one or more foreground colors and the related opacities you
    want to produce copies of the final PNG image for. For this option
    to take effect objects must be filled with black color (e.g.,
    000000), otherwise no color replacement will take place. Possible
    values to this variable take the form "XXXXXX-Y", where "XXXXXX"
    represent a color in hexadecimal format and the final "Y" must be
    1 for full opacity, 0 for full transparency, or any intermediate
    value. When this variable is not provided, final images are
    rendered using black foreground and full transparency (e.g.,
    000000-1).

BGCOLOR::
    Can be one or more background colors and the related opacity you
    want to render copies of the final PNG image for.  Possible values
    to this variable take the form "XXXXXX-Y", where "XXXXXX"
    represent a color in hexadecimal format and the final "Y" must be
    1 for full opacity, 0 for full transparency, or any intermediate
    value. When this variable is not provided, final images are
    rendered using black foreground and full transparency (e.g.,
    000000-1).

[[reduced-number-of-colors]]
=== Reducing number of colors

When *render-from* points to a PNG image and *png-flow* is set to
"indexed", *idforge-render* enters in indexed rendition mode.  In this
mode, the final image is produced with reduced number colors based on
the palette of colors provided as value *png-indexed-gpl* option.

png-indexed-gpl::
    Specifies the file holding the palette of colors that will be used
    to reduce the image colors. This file uses the comment field to
    set the color information in hexadecimal representation. See
    <<palette-of-colors>>. If the palette you provide doesn't include
    the hexadecimal representation in the comment field, the color
    transformation will fail and *idforge-render* will terminate its
    execution with an error message.

To find the optimized set of colors for your images, you can open the
image you provided in the *render-from* option using GIMP and reduce
its colors using GIMP's Indexed feature. Later, create a new palette
importing it from the indexed image you already have. Once you have
the palette of colors this way, you need to edit it using the Palettes
dialog to add each color hexadecimal value in the comment field,
respectively and save it to disk.  When you have the palette of colors
available in your personal GIMP's directory, you are ready to write
its location as value to *png-indexed-gpl* option and run
*idforge-render* command to get final images with the exact number of
colors you set in the palette.

When there are images with reduced number of colors with your
project's logotype, the palette of colors used to produce them must
include the exact color information needed to produce it. For example,
in the case of CentOS Projet logotype, the following colors +#262577+,
+#932279+, +#efa724+, +#9ccd2a+, +#ffffff+ must be present in the
palette you create. You must be absolutely sure about the color
information to avoide incosistencies in your project's visual
identity.

When there are images with reduced number of colors, it is possible
for you to realize that it doesn't look the way it should (e.g., there
is a noise all over it). To work around this issue you can open the
indexed image with GIMP and, retouch it with care and attention until
the noise is entirely removed from it.  The easiest and preferable way
of doing this, is using GIMP brushes specially conceived for that
purpose. For example, the CentOS Artwork SIG produces the
idforge-centos package with brushes related to CentOS Logotype and
CentOS Symbol for different sizes.

[[installation-media]]
=== Installation media

When the *render-type* option is set to "svg" and *svg-flow* is set to
"media", *idforge-render* enters in installation media rendition mode.
In this mode, it produces several PNG images based on release numbers,
architectures, type of media and the number needed to cover an
specific distribution. To specify this information, you need to
provide the following value "RELEASES:ARCHITECTURES:MEIDA*NUMBER",
where the color is a field separator and the values have the following
meaning:

RELEASES::
    Specifies the release numbers you want to produce installation
    media for (e.g., "5.10 6.5 7.1").
ARCHITECTURES::
    Specifies the architectures you want to produce installation media
    for (e.g., "i686 x86_64").
MEDIA\*NUMBER::
    Specifies the type of media (e.g., CD, DVD) and the number of them
    you want to produce image for.

All these options are nested so the number of images produced as
result of processing svg media flow is exponential to the number of
releases, architectures and media-number relation. See
<<example-managing-dependencies-to-produce-installation-media>>.

[[documentation]]
==== Documentation
...

[[managing-content-relation]]
== Managing Content Relation

Managing content relation is present when you need to produce one or
more specific images first in order to be able of producing another
one based on them later. In theses cases, you should grant a
production order consequent with the base components of the final
image you want to build.  In this context, graphic designers get
focused on one component at a time and in producing it well, and let
people writing configuration file to gear the pieces.

By managing content relation you can improve maintainability of
certain components like branded images. It let you concentrate design
models in a single location and make references to them from different
visual manifestation's configuration file.  This way it is possible to
introduce changes to design models and propagate them quickly to all
visual manifestations' images by running a single command.

The process of managing content relation was initially conceived
inside the *idforge-prepare(1)* command but it made the preparation
process too long, resource expensive and not all rendered images were
always used in each single interaction of *idforge-render* command.
So, these issues led to change the perspective about rendering
dependencies inside *idforge(1)* automation scripts from the
workstation preparation process up to the process of writing
configuration files.

[[files]]
== Files

*idforge-render* needs you to create a working directory using the
*idforge-prepare(1)* command and update the following files based on
the visual style and branding information you want to set for your
organization:

./Backgrounds/1920x1600.png::
    The artistic motif used as pattern to reinforce the visual
    identity of your project. This image must be provided in PNG
    format and must be created with the size (in pixels) specified in
    the file name.
./Backgrounds/1920x1600.png-14colors.gpl::
    A 14 colors palette produced with GIMP holding the color
    information indexed to 14 colors for the PNG image specified in
    the file name.
./Backgrounds/1920x1600.png-16colors.gpl::
    A 16 colors palette produced with GIMP holding the color
    information indexed to 16 colors for the PNG image specified in
    the file name.
./Models/Brands/168/logo.svg::
    The logo design of your organization in SVG format, 168 pixels of
    height and the appropriate white space for content protection from
    borders.
./Models/Brands/168/logo.png::
    The logo design of your organization in PNG format, indexed to the
    minimum number of color possible. This image is normally produced
    from its SVG version and later indexed using GIMP.
./Models/Brands/168/logo.gpl::
    The color information of your project logo. This is the palette of
    color you have as result of indexing the PNG version of your logo
    to the minimum number of colors.

The working directory provides a directory structure to organize your
entire project as well as the models that will be reused while
building your own organization documentation and packages. The models
are copied in the working directory with the intention of being
customized by you. They give you access to documentation sources in
Asciidoc format, images sources in SVG format, configuration files
used to gear everything up, and descriptions to help you extend the
basic layout for your particular situation.

See *idforge-prepare(1)* for more information about the working
directory layout.

== Examples

[[palette-of-colors]]
.Palette of colors
----------------------------------------------------------------------
GIMP Palette
Name: 1920x1600.png-16colors
Columns: 16
#
  2   4  14	02040e
  0   6  24	000618
  0   8  32	000820
  0   9  36	000924
  1   9  42	01092a
  0  11  47	000b2f
  1  11  53	010b35
  0  13  59	000d3b
  4  12  60	040c3c
  0  14  66	000e42
  0  16  73	001049
  0  18  82	001252
  1  20  90	01145a
  0  23  99	001763
  0  27 113	001b71
  0  35 136	002388
----------------------------------------------------------------------

.Rendering PNG images (base)
----------------------------------------------------------------------
render-from          = "${PWD}/QaTests/idforge-render/qatest-commons/Models/Images/document-background.svg"
render-directory     = "${PWD}/QaTests/idforge-render/qatest-2015012847797252944/Final"
svg-flow             = "base"
----------------------------------------------------------------------

.Rendering PNG images (extended)
----------------------------------------------------------------------
[idforge-symbol.png]
render-from          = "${PWD}/QaTests/idforge-render/qatest-commons/Models/Images/idforge-symbol.svg"
svg-flow             = "extended"
svg-flow-options     = "48:24221c-1 d4aa00-1 88aa00-1 d45500-1 a02c2c-1 2c5aa0-1:ffffff-0"
----------------------------------------------------------------------

.Rendering PNG images (indexed)
----------------------------------------------------------------------
[640x480-indexed.png]
render-from          = "${PWD}/QaTests/idforge-render/qatest-20150211182206285536962/Final/640x480.png"
render-directory     = "${PWD}/QaTests/idforge-render/qatest-20150211182206285536962/Final/"
png-flow             = "indexed"
png-indexed-gpl      = "${PWD}/QaTests/idforge-render/qatest-commons/Backgrounds/1600x1200.png-16colors.gpl"
----------------------------------------------------------------------

.Rendering LSS16 images (indexed)
----------------------------------------------------------------------
[640x480.lss]
render-from          = "${PWD}/QaTests/idforge-render/qatest-20150211182206285536962/Final/640x480.png"
render-directory     = "${PWD}/QaTests/idforge-render/qatest-20150211182206285536962/Final/"
png-flow             = "indexed"
png-indexed-gpl      = "${PWD}/QaTests/idforge-render/qatest-commons/Backgrounds/1600x1200.png-16colors.gpl"
----------------------------------------------------------------------

To produce images in LSS16 format, the configuration section must
terminate with the .lss string.

.Rendering documentation
----------------------------------------------------------------------
----------------------------------------------------------------------

[[example-managing-dependencies-to-produce-installation-media]]
.Managing dependencies to produce installation media
----------------------------------------------------------------------
[443x443.png]
render-from          = "${PWD}/QaTests/idforge-render/qatest-commons/Backgrounds/1600x1200.png"
render-directory     = "${PWD}/QaTests/idforge-render/qatest-20150210165843695450094/Final/"
png-flow             = "base"
png-base-command     = "convert -extract 443x443+0+0 +repage ${PNG_FILE} ${RENDER_FILE}"

[443x443-brand.png]
render-from          = "${PWD}/QaTests/idforge-render/qatest-20150210165843695450094/Final/443x443.png"
png-flow             = "base"
png-base-composition = "${PWD}/QaTests/idforge-render/qatest-20150210165843695450094/Final/ffffff-0/ffffff-1/48/idforge-logo.png:x48+96+80"

[idforge.png]
render-from         = "${PWD}/QaTests/idforge-render/qatest-commons/Models/Images/document-cd-label.svg"
render-from-po      = "${PWD}/QaTests/idforge-render/qatest-commons/Locales/${IDFORGE_LANG_LC}/document-cd-label.po"
render-directory    = "${PWD}/QaTests/idforge-render/qatest-20150210165843695450094/Final"
xml-expand-background = "${PWD}/QaTests/idforge-render/qatest-20150210165843695450094/Final/765x990.png"
xml-expand          = "=PRODUCT_NAME=idFORGE"
xml-expand          = "=BACKGROUND_IMAGE_CD=${PWD}/QaTests/idforge-render/qatest-20150210165843695450094/Final/443x443.png"
svg-flow            = "media"
svg-flow-options    = "0.1 0.1.2:i686 x86_64:DVD*2 CD*4"
----------------------------------------------------------------------

This example describes how to manage the image dependencies needed to
brand an image that has been previously cropped from a higher one and
then used as background to produce installation media images. This is
a fundamental construction in order to build branded background images
for different visual manifestations based on the same artistic motif.

In this example, the first section creates a new image image from
cropping a higher one.  The second section brands the cropped image
and illustrates that the name of the section doesn't affects the final
file name because the changes are all applied directly in the image
provided as value to render-from option.  Finally, the last section,
gears images produced so far and calls svg media flow to initiate the
construction of 2 DVDs and 4 CDs for releases 0.1 and 0.1.2 and
architectures i686 and x86_64.

== Author

include::Commons/author.inc[]

== Copyright

include::Commons/copyright.inc[]

== See also

=MANPAGE_OTHERS=

// vim: set syntax=asciidoc:
