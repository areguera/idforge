= idforge-locale(1)
Alain Reguera Delgado <alain.reguera@gmail.com>
idFORGE Framework =IDFORGE_VERSION=, =MANPAGE_YEAR=: =MANPAGE_DESCRIPTION=

== Name

idforge-locale - =MANPAGE_DESCRIPTION=

== Synopsis

----------------------------------------------------------------------
=MANPAGE_SYNOPSIS=
----------------------------------------------------------------------

== Description

The *{doctitle}* command allows you to manage the creation,
actualization, edition and elimination of translation files in PO and
MO formats for a wide range of programming languages including shell
scripts and XML-based file formats like SVG, HTML and DocBook.  This
command stands on the procedures implemented by both *xml2po(1)* and
*gettext(1)* commands and is specially designed to reuse the
configuration files the *idforge-render(1)* command employs to render
content. So, it results very useful when you need a standard procedure
to maintain localized images, documents, and shell scripts in a
community environment.

The *{doctitle}* command reads the configuration files provided as
argument in the command-line in the same order they were provided, one
by one.  Inside each configuration file, the sections are processed in
the same order they were found, from top to bottom, using the
extension of the first source file provided to *render-from* option as
reference to initiate the localization process.  When configuration
sections are being processed, *{doctitle}* evaluates the number of
times both *render-from* and *render-from-po* options have been
provided in it.  From this analysis the following two relations
between files can be established for further processing:

Processing files in one-to-one relation::
    When the same number of source and translation files are provided,
    *{doctitle}* creates/updates translation files in one-to-one
    relation with source files. This is, the first translation file
    holds the translatable strings for the first source file, the
    second translation file holds translatable strings for the second
    source file, and so on for each source and translation file
    provided.  This processing case is mostly used to manage
    translation file for XML-based source files (e.g., SVG, HTML,
    Docbook, etc.) individually.

Processing files in many-to-one relation::
    When the number of source files is greater than the number of
    translation files provided, *{doctitle}* only updates the
    first translation file specified, based on the content of all the
    source files provided. This processing case is mostly used to
    manage shell script translation files.

All other possible relations between *render-from* and
*render-from-po* options are not supported and make the *idforge(1)*
script to exit with an error message.

== Command-line Options

The *{doctitle}* command accepts the following command-line options:

include::Commons/options.inc[]

*-e, --edit*::
    Edits translation files set as value to *render-from-po*
    configuration option. This action uses the /usr/bin/vim command as
    default text editor to perform the action. The translation files
    are opened individually, one by one. To change the default text
    editor, you can use the VISUAL or EDITOR environment variables.

*-d, --delete*::
    Removes translation files set as value to *render-from-po* and
    *render-from-mo* configuration options.  This action takes place
    immediately, without any warning or confirmation.

To control the number of translation files you edit or delete, use the
*--filter* option from *idforge(1)* command-line. This option affects
the number of configuration sections you process, not the definition
of translation files itself. So, when a configuration section has
several translation files defined they all will be affected by the
actions you run. To rectify this (in case you need to), expand the
number of configuration section so you can set only one translation
file definition in each of them and then use the *--filter* option to
control what configuration section you want to apply actions to.

== Configuration Options

The *{doctitle}* command understands most configuration options the
*idforge-render(1)* uses to render content. Specially, *render-from*,
*render-from-po* and *render-from-mo*. This is intensional so both
commands can share the same configuration files.

== Examples

.Configuring one-to-one relation to produce localized documentation
======================================================================
----------------------------------------------------------------------
[hello_world.asciidoc]
render-from     = "${PWD}/hello_world.asciidoc"
render-from-po  = "${PWD}/Locales/${IDFORGE_LANG_LC}/hello_world.asciidoc.po"
----------------------------------------------------------------------
======================================================================

To enable content localization in a specific configuration section,
add the *render-from-po* option to it. This option must point to a
translation file in PO format, so the translator can use
*{doctitle}* command to edit it. The PO file contains the
translatable strings extracted from the source file set in the
*render-from* option. If you also need the related translation file in
MO format, add the *render-from-mo* option.

[CAUTION]
======================================================================
When you edit a translation file in PO format, the related translation
file in MO format isn't updated automatically. To propagate the
changes you recently introduced in the PO file into the related MO
file, you must run *{doctitle}* after editing the PO file.
======================================================================

.Configuring one-to-one relation to produce localized images
======================================================================
----------------------------------------------------------------------
[hello_world.png]
render-from     = "${PWD}/hello.svg"
render-from     = "${PWD}/world.svg"
render-from-po  = "${PWD}/Locales/${IDFORGE_LANG_LC}/hello.svg.po"
render-from-po  = "${PWD}/Locales/${IDFORGE_LANG_LC}/world.svg.po"
----------------------------------------------------------------------
======================================================================

In a one-to-one relation the source and translation files must be
equal in number.

.Configuring many-to-one relation to produce localized images
======================================================================
----------------------------------------------------------------------
[hello_world.png]
render-from     = "${PWD}/hello.svg"
render-from     = "${PWD}/world.svg"
render-from-po  = "${PWD}/Locales/${IDFORGE_LANG_LC}/${CONFIG_SECTION}.po"
----------------------------------------------------------------------
======================================================================

In a many-to-one relation there is only one translation file but more
than one source files.

.Configuring many-to-one relation to produce localized scripts
======================================================================
----------------------------------------------------------------------
[idforge]
render-from     = "${PWD}/Library/idforge*.sh"
render-from-po  = "${PWD}/Locales/${IDFORGE_LANG_LC}/${CONFIG_SECTION}.po"
render-from-mo  = "${PWD}/Locales/${IDFORGE_LANG_LC}/${CONFIG_SECTION}.mo"

[idforge-locale]
render-from     = "$(find ${PWD}/Library/Modules/Locale -name '*.sh' -type f)"
render-from-po  = "${PWD}/Locales/${IDFORGE_LANG_LC}/${CONFIG_SECTION}.po"
render-from-mo  = "${PWD}/Locales/${IDFORGE_LANG_LC}/${CONFIG_SECTION}.mo"
----------------------------------------------------------------------
======================================================================

In a many-to-one relation it is possible to use shell expansions to
specify several source files in a single entry of *render-from*
configuration option.  However, the same is not possible for
translation files which need to be specified explicitly.

include::Commons/environment.inc[]

VISUAL::
    Specifies the visual editor used to modify translation files in PO
    format. You can set this variable if you want to use a graphical
    PO editor like Virtaal. By default, no visual text editor is set
    and EDITOR environment variable is evaluated instead.
EDITOR::
    Specifies the text editor used to modify translation files in PO
    format. By default, it is set to /usr/bin/vim.

include::Commons/author.inc[]

include::Commons/bugs.inc[]

include::Commons/copyright.inc[]

include::Commons/also.inc[]

// vim: set syntax=asciidoc:
