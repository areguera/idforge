= idforge-modules(5)
Alain Reguera Delgado <alain.reguera@gmail.com>
idFORGE Framework =MANPAGE_VERSION=, =MANPAGE_YEAR=: Describes idforge module environments
:man source: idFORGE Framework
:man version: =MANPAGE_VERSION=
:man manual: File Formats and Conventions

== Name

idforge-modules - Describes idforge module environments.

== Synopsis

The module environment of *idforge(1)* is a collection of Bash
functions grouped by meaning and executed based on specific conditions
only.  Each module environment can be nested inside another to create
a chain of individual execution environments with their own scopes.
The higher module environment is visible to all its subsequent module
environments, but not the opposite.

The modular design of *idforge(1)* allows you to optimize the
construction of your shell scripts based on the features you want to
implement. For example, consider the case of printing both command's
usage and version information. The output of these actions is
conceptually different, so each one has its own module inside
*idforge(1)* (e.g., *usage* and *version*, respectively). When you
request usage information only the functions related to usage
information are loaded. No function related to version information is
loaded in such case.

The modular design of *idforge(1)* was introduced in tcar-0.5, making
it possible to divide long tasks into smaller tasks easier to debug,
maintain and share with other modules efficiently. After version 0.12,
the *tcar* package was renamed to *idforge*, and its version number
reset to 0.1.

[[module-environment]]
== Module Environment

When you execute *idforge(1)* it creates a shell environment in which
variables and functions can be defined. This environment has the
highest scope and contains variables and functions that will always be
available in subsequent module environments.

.Execution environment of hello module
======================================================================
-----------------------------------------------------------------
idforge.sh                              <1>
`-- idforge()                           <2>
    `-- idforge_setModuleEnvironment()  <3>
        `-- hello()                     <4>
-----------------------------------------------------------------
<1> Script initialization
<2> Library initialization
<3> Module initialization
<4> Module environment
======================================================================

A module environment is a collection of functions that perform small
tasks and can be further executed in a specific order to produce
specific results.  They are executed and destroyed at demand based on
their hierarchy (e.g., whether they are "parent modules", "child
modules", or "sibling modules").

<<module-environments-in-action>> shows how module environments are
created and destroyed after executing the the following command:

----------------------------------------------------------------------
]$ idforge hello --camel Hello
----------------------------------------------------------------------

[[module-environments-in-action]]
.Module environments in action
======================================================================
-----------------------------------------------------------------
03/08/2015 04:20:52 PM =========================> 	[0] idforge
03/08/2015 04:20:52 PM IDFORGE_MODULE_BASEDIR     	Library/Modules
03/08/2015 04:20:52 PM IDFORGE_MODULE_NAME        	hello
03/08/2015 04:20:52 PM IDFORGE_MODULE_TYPE        	parent
03/08/2015 04:20:52 PM IDFORGE_MODULE_DIR         	Library/Modules/Hello
03/08/2015 04:20:52 PM IDFORGE_MODULE_ARGUMENT    	--camel Hello
03/08/2015 04:20:52 PM IDFORGE_MODULE_DIR_MODULES 	Library/Modules/Hello/Modules
03/08/2015 04:20:52 PM IDFORGE_MODULE_DIR_CONFIGS 	Library/Modules/Hello/Configs
03/08/2015 04:20:52 PM IDFORGE_MODULE_INIT_FILE   	Library/Modules/Hello/hello.sh
03/08/2015 04:20:52 PM TEXTDOMAIN                 	idforge-hello
03/08/2015 04:20:52 PM TEXTDOMAINDIR              	/usr/share/locale
03/08/2015 04:20:52 PM export -f                  	hello
03/08/2015 04:20:52 PM export -f                  	hello_setOptions
03/08/2015 04:20:52 PM -------------------------> 	hello --camel Hello
03/08/2015 04:20:52 PM =========================> 	[1] hello
03/08/2015 04:20:52 PM IDFORGE_MODULE_BASEDIR     	Library/Modules/Hello/Modules
03/08/2015 04:20:52 PM IDFORGE_MODULE_NAME        	output
03/08/2015 04:20:52 PM IDFORGE_MODULE_TYPE        	child
03/08/2015 04:20:52 PM IDFORGE_MODULE_DIR         	Library/Modules/Hello/Modules/Output
03/08/2015 04:20:52 PM IDFORGE_MODULE_ARGUMENT    	Hello
03/08/2015 04:20:52 PM IDFORGE_MODULE_DIR_MODULES 	Library/Modules/Hello/Modules/Output/Modules
03/08/2015 04:20:52 PM IDFORGE_MODULE_DIR_CONFIGS 	Library/Modules/Hello/Modules/Output/Configs
03/08/2015 04:20:52 PM IDFORGE_MODULE_INIT_FILE   	Library/Modules/Hello/Modules/Output/output.sh
03/08/2015 04:20:52 PM TEXTDOMAIN                 	idforge-hello
03/08/2015 04:20:52 PM TEXTDOMAINDIR              	/usr/share/locale
03/08/2015 04:20:52 PM export -f                  	output
03/08/2015 04:20:52 PM -------------------------> 	output Hello
03/08/2015 04:20:52 PM =========================> 	[2] output
03/08/2015 04:20:52 PM IDFORGE_MODULE_BASEDIR     	Library/Modules/Hello/Modules/Output/Modules
03/08/2015 04:20:52 PM IDFORGE_MODULE_NAME        	camel
03/08/2015 04:20:52 PM IDFORGE_MODULE_TYPE        	child
03/08/2015 04:20:52 PM IDFORGE_MODULE_DIR         	Library/Modules/Hello/Modules/Output/Modules/Camel
03/08/2015 04:20:52 PM IDFORGE_MODULE_ARGUMENT
03/08/2015 04:20:52 PM IDFORGE_MODULE_DIR_MODULES 	Library/Modules/Hello/Modules/Output/Modules/Camel/Modules
03/08/2015 04:20:52 PM IDFORGE_MODULE_DIR_CONFIGS 	Library/Modules/Hello/Modules/Output/Modules/Camel/Configs
03/08/2015 04:20:52 PM IDFORGE_MODULE_INIT_FILE   	Library/Modules/Hello/Modules/Output/Modules/Camel/camel.sh
03/08/2015 04:20:52 PM TEXTDOMAIN                 	idforge-hello
03/08/2015 04:20:52 PM TEXTDOMAINDIR              	/usr/share/locale
03/08/2015 04:20:52 PM export -f                  	camel
03/08/2015 04:20:52 PM -------------------------> 	camel
03/08/2015 04:20:52 PM =========================> 	[3] camel
03/08/2015 04:20:52 PM IDFORGE_MODULE_BASEDIR     	Library/Modules/Hello/Modules/Output/Modules
03/08/2015 04:20:52 PM IDFORGE_MODULE_NAME        	upper
03/08/2015 04:20:52 PM IDFORGE_MODULE_TYPE        	sibling
03/08/2015 04:20:52 PM IDFORGE_MODULE_DIR         	Library/Modules/Hello/Modules/Output/Modules/Upper
03/08/2015 04:20:52 PM IDFORGE_MODULE_ARGUMENT
03/08/2015 04:20:52 PM IDFORGE_MODULE_DIR_MODULES 	Library/Modules/Hello/Modules/Output/Modules/Upper/Modules
03/08/2015 04:20:52 PM IDFORGE_MODULE_DIR_CONFIGS 	Library/Modules/Hello/Modules/Output/Modules/Upper/Configs
03/08/2015 04:20:52 PM IDFORGE_MODULE_INIT_FILE   	Library/Modules/Hello/Modules/Output/Modules/Upper/upper.sh
03/08/2015 04:20:52 PM TEXTDOMAIN                 	idforge-hello
03/08/2015 04:20:52 PM TEXTDOMAINDIR              	/usr/share/locale
03/08/2015 04:20:52 PM export -f                  	upper
03/08/2015 04:20:52 PM -------------------------> 	upper
H
03/08/2015 04:20:52 PM IDFORGE_MODULE_EXIT        	0
03/08/2015 04:20:52 PM <------------------------- 	upper
03/08/2015 04:20:52 PM unset -f                   	upper
03/08/2015 04:20:53 PM <========================= 	[3] camel
03/08/2015 04:20:53 PM TEXTDOMAIN                 	idforge-hello
03/08/2015 04:20:53 PM TEXTDOMAINDIR              	/usr/share/locale
03/08/2015 04:20:53 PM =========================> 	[3] camel
03/08/2015 04:20:53 PM IDFORGE_MODULE_BASEDIR     	Library/Modules/Hello/Modules/Output/Modules
03/08/2015 04:20:53 PM IDFORGE_MODULE_NAME        	lower
03/08/2015 04:20:53 PM IDFORGE_MODULE_TYPE        	sibling
03/08/2015 04:20:53 PM IDFORGE_MODULE_DIR         	Library/Modules/Hello/Modules/Output/Modules/Lower
03/08/2015 04:20:53 PM IDFORGE_MODULE_ARGUMENT
03/08/2015 04:20:53 PM IDFORGE_MODULE_DIR_MODULES 	Library/Modules/Hello/Modules/Output/Modules/Lower/Modules
03/08/2015 04:20:53 PM IDFORGE_MODULE_DIR_CONFIGS 	Library/Modules/Hello/Modules/Output/Modules/Lower/Configs
03/08/2015 04:20:53 PM IDFORGE_MODULE_INIT_FILE   	Library/Modules/Hello/Modules/Output/Modules/Lower/lower.sh
03/08/2015 04:20:53 PM TEXTDOMAIN                 	idforge-hello
03/08/2015 04:20:53 PM TEXTDOMAINDIR              	/usr/share/locale
03/08/2015 04:20:53 PM export -f                  	lower
03/08/2015 04:20:53 PM -------------------------> 	lower
e
03/08/2015 04:20:53 PM IDFORGE_MODULE_EXIT        	0
03/08/2015 04:20:53 PM <------------------------- 	lower
03/08/2015 04:20:53 PM unset -f                   	lower
03/08/2015 04:20:53 PM <========================= 	[3] camel
03/08/2015 04:20:53 PM TEXTDOMAIN                 	idforge-hello
03/08/2015 04:20:53 PM TEXTDOMAINDIR              	/usr/share/locale
03/08/2015 04:20:53 PM =========================> 	[3] camel
03/08/2015 04:20:53 PM IDFORGE_MODULE_BASEDIR     	Library/Modules/Hello/Modules/Output/Modules
03/08/2015 04:20:53 PM IDFORGE_MODULE_NAME        	upper
03/08/2015 04:20:53 PM IDFORGE_MODULE_TYPE        	sibling
03/08/2015 04:20:53 PM IDFORGE_MODULE_DIR         	Library/Modules/Hello/Modules/Output/Modules/Upper
03/08/2015 04:20:53 PM IDFORGE_MODULE_ARGUMENT
03/08/2015 04:20:53 PM IDFORGE_MODULE_DIR_MODULES 	Library/Modules/Hello/Modules/Output/Modules/Upper/Modules
03/08/2015 04:20:53 PM IDFORGE_MODULE_DIR_CONFIGS 	Library/Modules/Hello/Modules/Output/Modules/Upper/Configs
03/08/2015 04:20:53 PM IDFORGE_MODULE_INIT_FILE   	Library/Modules/Hello/Modules/Output/Modules/Upper/upper.sh
03/08/2015 04:20:53 PM TEXTDOMAIN                 	idforge-hello
03/08/2015 04:20:53 PM TEXTDOMAINDIR              	/usr/share/locale
03/08/2015 04:20:53 PM export -f                  	upper
03/08/2015 04:20:53 PM -------------------------> 	upper
L
03/08/2015 04:20:53 PM IDFORGE_MODULE_EXIT        	0
03/08/2015 04:20:53 PM <------------------------- 	upper
03/08/2015 04:20:53 PM unset -f                   	upper
03/08/2015 04:20:53 PM <========================= 	[3] camel
03/08/2015 04:20:53 PM TEXTDOMAIN                 	idforge-hello
03/08/2015 04:20:53 PM TEXTDOMAINDIR              	/usr/share/locale
03/08/2015 04:20:53 PM =========================> 	[3] camel
03/08/2015 04:20:53 PM IDFORGE_MODULE_BASEDIR     	Library/Modules/Hello/Modules/Output/Modules
03/08/2015 04:20:53 PM IDFORGE_MODULE_NAME        	lower
03/08/2015 04:20:53 PM IDFORGE_MODULE_TYPE        	sibling
03/08/2015 04:20:53 PM IDFORGE_MODULE_DIR         	Library/Modules/Hello/Modules/Output/Modules/Lower
03/08/2015 04:20:53 PM IDFORGE_MODULE_ARGUMENT
03/08/2015 04:20:53 PM IDFORGE_MODULE_DIR_MODULES 	Library/Modules/Hello/Modules/Output/Modules/Lower/Modules
03/08/2015 04:20:53 PM IDFORGE_MODULE_DIR_CONFIGS 	Library/Modules/Hello/Modules/Output/Modules/Lower/Configs
03/08/2015 04:20:53 PM IDFORGE_MODULE_INIT_FILE   	Library/Modules/Hello/Modules/Output/Modules/Lower/lower.sh
03/08/2015 04:20:53 PM TEXTDOMAIN                 	idforge-hello
03/08/2015 04:20:53 PM TEXTDOMAINDIR              	/usr/share/locale
03/08/2015 04:20:53 PM export -f                  	lower
03/08/2015 04:20:53 PM -------------------------> 	lower
l
03/08/2015 04:20:53 PM IDFORGE_MODULE_EXIT        	0
03/08/2015 04:20:53 PM <------------------------- 	lower
03/08/2015 04:20:53 PM unset -f                   	lower
03/08/2015 04:20:53 PM <========================= 	[3] camel
03/08/2015 04:20:53 PM TEXTDOMAIN                 	idforge-hello
03/08/2015 04:20:53 PM TEXTDOMAINDIR              	/usr/share/locale
03/08/2015 04:20:53 PM =========================> 	[3] camel
03/08/2015 04:20:53 PM IDFORGE_MODULE_BASEDIR     	Library/Modules/Hello/Modules/Output/Modules
03/08/2015 04:20:53 PM IDFORGE_MODULE_NAME        	upper
03/08/2015 04:20:53 PM IDFORGE_MODULE_TYPE        	sibling
03/08/2015 04:20:53 PM IDFORGE_MODULE_DIR         	Library/Modules/Hello/Modules/Output/Modules/Upper
03/08/2015 04:20:53 PM IDFORGE_MODULE_ARGUMENT
03/08/2015 04:20:53 PM IDFORGE_MODULE_DIR_MODULES 	Library/Modules/Hello/Modules/Output/Modules/Upper/Modules
03/08/2015 04:20:53 PM IDFORGE_MODULE_DIR_CONFIGS 	Library/Modules/Hello/Modules/Output/Modules/Upper/Configs
03/08/2015 04:20:53 PM IDFORGE_MODULE_INIT_FILE   	Library/Modules/Hello/Modules/Output/Modules/Upper/upper.sh
03/08/2015 04:20:53 PM TEXTDOMAIN                 	idforge-hello
03/08/2015 04:20:53 PM TEXTDOMAINDIR              	/usr/share/locale
03/08/2015 04:20:53 PM export -f                  	upper
03/08/2015 04:20:53 PM -------------------------> 	upper
O
03/08/2015 04:20:53 PM IDFORGE_MODULE_EXIT        	0
03/08/2015 04:20:53 PM <------------------------- 	upper
03/08/2015 04:20:53 PM unset -f                   	upper
03/08/2015 04:20:53 PM <========================= 	[3] camel
03/08/2015 04:20:53 PM TEXTDOMAIN                 	idforge-hello
03/08/2015 04:20:53 PM TEXTDOMAINDIR              	/usr/share/locale
03/08/2015 04:20:53 PM IDFORGE_MODULE_EXIT        	0
03/08/2015 04:20:53 PM <------------------------- 	camel
03/08/2015 04:20:53 PM unset -f                   	camel
03/08/2015 04:20:53 PM <========================= 	[2] output
03/08/2015 04:20:53 PM TEXTDOMAIN                 	idforge-hello
03/08/2015 04:20:53 PM TEXTDOMAINDIR              	/usr/share/locale
03/08/2015 04:20:53 PM IDFORGE_MODULE_EXIT        	0
03/08/2015 04:20:53 PM <------------------------- 	output Hello
03/08/2015 04:20:53 PM unset -f                   	output
03/08/2015 04:20:53 PM <========================= 	[1] hello
03/08/2015 04:20:53 PM TEXTDOMAIN                 	idforge-hello
03/08/2015 04:20:53 PM TEXTDOMAINDIR              	/usr/share/locale
03/08/2015 04:20:53 PM IDFORGE_MODULE_EXIT        	0
03/08/2015 04:20:53 PM <------------------------- 	hello --camel Hello
03/08/2015 04:20:53 PM unset -f                   	hello
03/08/2015 04:20:53 PM unset -f                   	hello_setOptions
03/08/2015 04:20:53 PM <========================= 	[0] idforge
03/08/2015 04:20:53 PM TEXTDOMAIN                 	idforge
03/08/2015 04:20:53 PM TEXTDOMAINDIR              	/usr/share/locale
03/08/2015 04:20:53 PM IDFORGE_EXIT               	0
-----------------------------------------------------------------
======================================================================

[[parent-modules-environment]]
=== Parent Modules

A new parent module environment is initiated when you call the
following function:

----------------------------------------------------------------------
idforge_setModuleEnvironment -t "parent" -m "modulename"
----------------------------------------------------------------------

When the *--debug* option is provided in the *idforge(1)*
command-line, the sibling modules are identified by the word *parent*
on the right side of IDFORGE_MODULE_TYPE environment variable.

Parent modules are very simple in design and you can use them to
implement simple solutions quickly. Normally, when you execute a
parent module, you initiate the highest module environment possible
inside *idforge(1)* execution environment.  Parent modules are
frequently used to define module-specifc global variables, interpret
module-specific options passed through the command-line and execute
the appropriate actions based on them (e.g., executing a chain of
child modules).

[[parent-module-layout]]
.idforge-hello parent module directory layout
======================================================================
-----------------------------------------------------------------
Library/Modules/Hello/
|-- hello.sh                        <1>
|-- hello_setOptions.sh             <2>
`-- Modules
    `-- Output
        |-- Modules
        |   |-- Camel
        |   |   `-- camel.sh
        |   |-- Lower
        |   |   `-- lower.sh
        |   |-- Random
        |   |   `-- random.sh
        |   `-- Upper
        |       `-- upper.sh
        `-- output.sh

7 directories, 7 files
-----------------------------------------------------------------
<1> Module initialization.
<2> Module command-line parser.
======================================================================

The module's initialization contains the module's main function
definition.  The function definition is written using the long
definition format (i.e., it must begin with the word +function+, then
the function name, and finally the +{+ character).  The name of the
function is exactly the same of the initialization file but without
the +.sh+ extension. These conditions are required in order for
*idforge(1)* script to execute the function definition and destroy it
when it is no longer used.  See <<hello>>.

Inside the function definition you write all the commands you want the
module to run, once executed.  The function definition can be as
simple as one single line of code or as complex as you can imagine
(too complex code is sign of bad design, so keep it simple). It is the
place where you express your solutions.

In case you notice the initialization file is growing up inevitably,
you can reduce its code by refactoring it.  To do so, you can use
resources like module-specific functions and child modules.  These
resources are described in <<module-optimization>>, and they help you
to keep the initialization file in a simple state, easy to understand,
maintain and debug.

[[hello]]
.hello.sh
======================================================================
-----------------------------------------------------------------
#!/bin/bash
######################################################################
#
#   idFORGE Framework - Manage identity manuals in community
#   Copyright © 2015 CentOS Artwork SIG
#
#   idFORGE Framework is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License as
#   published by the Free Software Foundation; either version 2 of the
#   License, or (at your option) any later version.
#
#   idFORGE Framework is distributed in the hope that it will be
#   useful, but WITHOUT ANY WARRANTY; without even the implied
#   warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#   See the GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with idFORGE Framework; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   Alain Reguera Delgado <alain.reguera@gmail.com>
#   39 Street No. 4426 Cienfuegos, Cuba.
#
######################################################################

# Print greeting messages and exit successfully.
function hello {

    # Initialize module's flags.
    local HELLO_FLAGS=''

    # Initialize command-line arguments and interpret arguments and
    # options passed through command-line.
    local ARGUMENT='' ARGUMENTS=''; hello_setOptions "${@}"

    # Verify existence of command-line arguments. When they don't
    # exist, just return to caller. This is necessary to print the
    # module's usage information cleanly.
    [[ -z ${ARGUMENTS} ]] && return

    # Execute output child module to process actions for each
    # argument.
    for ARGUMENT in ${ARGUMENTS};do
        idforge_setModuleEnvironment -m 'output' -t 'child' -g "${ARGUMENT}"
    done

}
-----------------------------------------------------------------
======================================================================

When you write functions for *idforge(1)* modules you must add a top
comment describing the legal status of the source code you write and
contributed. The source code of *idforge(1)* is distributed under the
terms of GNU Public License (GPL) version 2.  This repetitive legal
information needs to be present in all function scripts that make
*idforge(1)* to avoid unexpected misunderstanding about the legal
status of the source code, so as to protect the overall operation of
it (see the section "How to Apply These Terms to Your New Programs" in
the LICENSE file).

[[module-optimization]]
Module Optimization
-------------------

The module environment the *idforge(1)* command provides has four
resources that you can use to optimize your module implementations.
These resources are *related functions*, *child modules*, *sibling
modules* and *recursive modules*.

[[related-functions]]
=== Related Functions

Related functions or module-specific functions are very useful when
you need to refactor a module implementation.  Related functions must
be created thinking in executing them always, whenever the module
scope they pertain to is executed. Such an example of this usage is
how parent modules parse arguments provided in the command-line.  For
example, the initialization script <<hello>> uses the
<<hello_setOptions>> related function to interpret the arguments
passed through the command-line.  Notice how many lines in the
initialization script has been reduced.

Related functions are written using the module's name, then an
underscore (+\_+), then a descriptive name and, finally, the +.sh+
extension. The function definition inside the function file also
follows such convention but excludes the +.sh+ extension from name
(e.g., the function file +hello_setOptions.sh+ has a function
definition named +hello_setOptions+ inside).  These conventions are
used to export and destroy the related functions when new module
environments are created and destroyed.  If you create related
function files with a pattern different from that described here, they
will not be executed nor available inside the initialization file of
the module environment being currently executed.

[[hello_setOptions]]
.hello_setOptions.sh
======================================================================
-----------------------------------------------------------------
# ... top comment removed for brevity
# Interpret module-specific options for hello.
function hello_setOptions {

    # Define short options we want to support.
    local ARGSS="h,v,s,g:,l,u,c,r"

    # Define long options we want to support.
    local ARGSL="help,version,description,lower,upper,camel,random"

    # Redefine arguments using getopt(1) command parser and reset
    # positional parameters on this function, using output produced
    # from (getopt) arguments parser.
    ARGUMENTS=$(idforge_setArguments "${@}")
    [[ ${?} -ne 0 ]] && idforge_printMessage "`gettext "The argument verification failed"`" --as-error-line
    eval set -- "${ARGUMENTS}"

    # Look for options passed through command-line.
    while true; do
        case "${1}" in

            -h | --help )
                idforge_printHelp
                shift 1
                ;;

            -v | --version )
                idforge_setModuleEnvironment -t 'parent' -m 'version' -g ${IDFORGE_MODULE_NAME}
                shift 1
                ;;

            -s | --description )
                idforge_printMessage "`gettext "Print a greeting and exit successfully."`" --as-stdout-line
                shift 1
                ;;

            -l | --lower )
                HELLO_FLAGS="${HELLO_FLAGS} lower"
                shift 1
                ;;

            -u | --upper )
                HELLO_FLAGS="${HELLO_FLAGS} upper"
                shift 1
                ;;

            -c | --camel )
                HELLO_FLAGS="${HELLO_FLAGS} camel"
                shift 1
                ;;

            -r | --random )
                HELLO_FLAGS="${HELLO_FLAGS} random"
                shift 1
                ;;

            -- )
                shift 1
                break
                ;;
        esac
    done

    # Redefine arguments using current positional parameters. Only
    # paths should remain as arguments at this point.
    ARGUMENTS="${@}"

}
-----------------------------------------------------------------
======================================================================

[NOTE]
======================================================================
The related function <<hello_setOptions>> presents the construction
standard we use inside *idforge(1)* for parsing arguments passed
through the command-line in a per-module basis.  As convention, all
the parent modules definitions you write must be able to interpret the
*--help*, *--version* and *--description* options using the
construction described here.
======================================================================

Related functions aren't very efficient when you need to execute them
based on specific conditions. When a module is executed, related
functions are exported to *idforge(1)* shell environment. They remain
there, consuming memory, until the module they belong to is destroyed.
If you create a related function and never execute it, it will consume
memory, as well, and will end up being a waste of resources. So, use
related functions when you are absolutely sure they will be executed
at some point, in one single iteration of *idforge(1)*.  If you need
to execute functions based on specific conditions, use child modules,
instead.

[[child-modules]]
=== Child Modules

A new child module environment is initiated when you call the
following function:

----------------------------------------------------------------------
idforge_setModuleEnvironment -t "child" -m "modulename"
----------------------------------------------------------------------

When the *--debug* option is provided in the *idforge(1)*
command-line, the sibling modules are identified by the word *child*
on the right side of IDFORGE_MODULE_TYPE environment variable.

The child modules have the characteristic of being nested modules.
They cannot be executed directly from the command-line. Normally,
child modules are executed from one parent modules but they can be
executed from other child modules, as well.

When several child modules are executed in one single iteration of
*idforge(1)*, they create a chain of modules.  Chain of modules are
generally created when you want to divide one large task into smaller
tasks and also control which of these smaller tasks is executed based
on specific conditions (e.g., you may want to render images or
documentation, but not both, in one single iteration of *idforge(1)*
script).

In a chain of modules, lower modules in the chain (those started last)
have access to information set by modules higher in the chain (those
started first), but not in the opposite order. When processing
information this way, modules aren't destroyed until the last module
executed in the chain has finished its work (e.g., all the commands
inside it have been executed). At that point, child modules are
destroyed automatically in the reverse order they were executed.

<<module-environments-in-action>> shows the child modules' ability of
reducing scope as they get deeper in the chain of executed modules.
However, child modules lack the possibility of nesting modules that
share the same scope. For instance, <<module-environments-in-action>>,
you cannot execute the modules *lower*  or *upper* from *camel*
module, as if they were child modules of *camel* module.  That is not
possible because they all have the same scope, which is, to print the
greeting message to standard output.

The child modules are an effective way of expanding the scope of the
chain of module environment based on specific condition. However, when
module environments share the same level of hierarchy in the directory
structure they cannot be called as child one from another. In such
cases, you need to use *sibling modules*, instead.

[[sibling-modules]]
=== Sibling Modules

A new sibling module environment is initiated when you call the
following function:

----------------------------------------------------------------------
idforge_setModuleEnvironment -t "sibling" -m "modulename"
----------------------------------------------------------------------

When the *--debug* option is provided in the *idforge(1)*
command-line, the sibling modules are identified by the word *sibling*
on the right side of IDFORGE_MODULE_TYPE environment variable.

The sibling modules are another type of nested modules but, in
contrast to child modules, sibling modules cannot be executed from
parent modules.  Normally, sibling modules are executed from other
sibling modules but, considering the context, they can be executed
from child modules too, to initiate sibling processing.

When several siblings modules are executed, they also build a chain of
modules. In contrast to chain of child modules, the chain of sibling
modules destroys the last sibling module executed before executing the
next sibling module. This makes the chain to stop its growing at
sibling module processing, unless you call a child module from a
sibling module. In which case, the chain expansion would continue
growing as long as the number of child modules you execute. This
process becomes more visible when you take a look at
<<module-environments-in-action>>.

Normally, one module is executed at some point and destroyed at the
same point when it has finished its work, however, what if the next
immediate module you are about to execute is the same module you are
about to destroy? This is, you need to execute the last module in the
chain of executed modules again, but, this time, from itself.  In
cases like this, the *idforge(1)* script doesn't destroy the last
module.  It cannot, because you are certainly executing a new module
from itself, so it has to wait for this new call to finish in order to
be destroyed. This kind of processing is known as "processing sibling
modules recursively."

[[recursive-modules]]
=== Recursive Modules

When one module environment executes as sibling of itself we are in
presence of a recursive sibling module execution. The recursive
execution of sibling modules doesn't destroy the last module in the
chain of executed modules and doesn't increment or decrement the
module counter either.  The module counter is somehow frozen until a
different module environment is executed. In cases like this, the last
module environment remains in memory for the new module execution so
it can be reused.  This process becomes more visible when you take a
look at <<debug-recursive-modules>>.

[CAUTION]
======================================================================
When you execute sibling modules recursively, you must be very careful
not to get trapped into an endless loop.
======================================================================

[[debug-recursive-modules]]
.Processing execution of modules recursively
======================================================================
-----------------------------------------------------------------
03/08/2015 04:49:44 PM =========================> 	[0] idforge
03/08/2015 04:49:44 PM IDFORGE_MODULE_BASEDIR     	Library/Modules
03/08/2015 04:49:44 PM IDFORGE_MODULE_NAME        	hello
03/08/2015 04:49:44 PM IDFORGE_MODULE_TYPE        	parent
03/08/2015 04:49:44 PM IDFORGE_MODULE_DIR         	Library/Modules/Hello
03/08/2015 04:49:44 PM IDFORGE_MODULE_ARGUMENT    	--random Hello
03/08/2015 04:49:44 PM IDFORGE_MODULE_DIR_MODULES 	Library/Modules/Hello/Modules
03/08/2015 04:49:44 PM IDFORGE_MODULE_DIR_CONFIGS 	Library/Modules/Hello/Configs
03/08/2015 04:49:44 PM IDFORGE_MODULE_INIT_FILE   	Library/Modules/Hello/hello.sh
03/08/2015 04:49:44 PM TEXTDOMAIN                 	idforge-hello
03/08/2015 04:49:44 PM TEXTDOMAINDIR              	/usr/share/locale
03/08/2015 04:49:44 PM export -f                  	hello
03/08/2015 04:49:44 PM export -f                  	hello_setOptions
03/08/2015 04:49:44 PM -------------------------> 	hello --random Hello
03/08/2015 04:49:44 PM =========================> 	[1] hello
03/08/2015 04:49:44 PM IDFORGE_MODULE_BASEDIR     	Library/Modules/Hello/Modules
03/08/2015 04:49:44 PM IDFORGE_MODULE_NAME        	output
03/08/2015 04:49:44 PM IDFORGE_MODULE_TYPE        	child
03/08/2015 04:49:44 PM IDFORGE_MODULE_DIR         	Library/Modules/Hello/Modules/Output
03/08/2015 04:49:44 PM IDFORGE_MODULE_ARGUMENT    	Hello
03/08/2015 04:49:44 PM IDFORGE_MODULE_DIR_MODULES 	Library/Modules/Hello/Modules/Output/Modules
03/08/2015 04:49:44 PM IDFORGE_MODULE_DIR_CONFIGS 	Library/Modules/Hello/Modules/Output/Configs
03/08/2015 04:49:44 PM IDFORGE_MODULE_INIT_FILE   	Library/Modules/Hello/Modules/Output/output.sh
03/08/2015 04:49:44 PM TEXTDOMAIN                 	idforge-hello
03/08/2015 04:49:44 PM TEXTDOMAINDIR              	/usr/share/locale
03/08/2015 04:49:44 PM export -f                  	output
03/08/2015 04:49:44 PM -------------------------> 	output Hello
03/08/2015 04:49:44 PM =========================> 	[2] output
03/08/2015 04:49:44 PM IDFORGE_MODULE_BASEDIR     	Library/Modules/Hello/Modules/Output/Modules
03/08/2015 04:49:44 PM IDFORGE_MODULE_NAME        	random
03/08/2015 04:49:44 PM IDFORGE_MODULE_TYPE        	child
03/08/2015 04:49:44 PM IDFORGE_MODULE_DIR         	Library/Modules/Hello/Modules/Output/Modules/Random
03/08/2015 04:49:44 PM IDFORGE_MODULE_ARGUMENT
03/08/2015 04:49:44 PM IDFORGE_MODULE_DIR_MODULES 	Library/Modules/Hello/Modules/Output/Modules/Random/Modules
03/08/2015 04:49:44 PM IDFORGE_MODULE_DIR_CONFIGS 	Library/Modules/Hello/Modules/Output/Modules/Random/Configs
03/08/2015 04:49:44 PM IDFORGE_MODULE_INIT_FILE   	Library/Modules/Hello/Modules/Output/Modules/Random/random.sh
03/08/2015 04:49:44 PM TEXTDOMAIN                 	idforge-hello
03/08/2015 04:49:44 PM TEXTDOMAINDIR              	/usr/share/locale
03/08/2015 04:49:44 PM export -f                  	random
03/08/2015 04:49:44 PM -------------------------> 	random
l
03/08/2015 04:49:45 PM =========================> 	[3] random
03/08/2015 04:49:45 PM ~~~~~~~~~~~~~~~~~~~~~~~~~> 	random
l
03/08/2015 04:49:45 PM =========================> 	[3] random
03/08/2015 04:49:45 PM ~~~~~~~~~~~~~~~~~~~~~~~~~> 	random
l
03/08/2015 04:49:45 PM =========================> 	[3] random
03/08/2015 04:49:45 PM ~~~~~~~~~~~~~~~~~~~~~~~~~> 	random
e
03/08/2015 04:49:45 PM =========================> 	[3] random
03/08/2015 04:49:45 PM ~~~~~~~~~~~~~~~~~~~~~~~~~> 	random
H
03/08/2015 04:49:45 PM IDFORGE_MODULE_EXIT        	0
03/08/2015 04:49:45 PM <------------------------- 	random
03/08/2015 04:49:45 PM unset -f                   	random
03/08/2015 04:49:45 PM <========================= 	[2] output
03/08/2015 04:49:45 PM TEXTDOMAIN                 	idforge-hello
03/08/2015 04:49:45 PM TEXTDOMAINDIR              	/usr/share/locale
03/08/2015 04:49:45 PM IDFORGE_MODULE_EXIT        	0
03/08/2015 04:49:45 PM <------------------------- 	output Hello
03/08/2015 04:49:45 PM unset -f                   	output
03/08/2015 04:49:45 PM <========================= 	[1] hello
03/08/2015 04:49:45 PM TEXTDOMAIN                 	idforge-hello
03/08/2015 04:49:45 PM TEXTDOMAINDIR              	/usr/share/locale
03/08/2015 04:49:45 PM IDFORGE_MODULE_EXIT        	0
03/08/2015 04:49:45 PM <------------------------- 	hello --random Hello
03/08/2015 04:49:45 PM unset -f                   	hello
03/08/2015 04:49:45 PM unset -f                   	hello_setOptions
03/08/2015 04:49:45 PM <========================= 	[0] idforge
03/08/2015 04:49:45 PM TEXTDOMAIN                 	idforge
03/08/2015 04:49:45 PM TEXTDOMAINDIR              	/usr/share/locale
03/08/2015 04:49:45 PM IDFORGE_EXIT               	0
-----------------------------------------------------------------
======================================================================

Recursive execution of modules occurs only when the module you are
executing is considered sibling of the last module executed in the
chain of executed modules and they both have the same name. The fact
that no variable name is printed out in <<debug-recursive-modules>>
means that they were not created. The arrows' style changes from +->+
to +~>+ meaning that module-specific functions weren't exported for
the new module execution either. It also means that the initialization
script is reusing both related functions and variables from the last
module environment in the chain of executed modules. In this case the
*random* module.

[[files]]
== Files

Library/::
    ...
Library/Modules/Name/<name>.sh::
    Sell scripts for module initialization
Library/Modules/Name/<name>_setOptions.sh::
    Shell script used to define the module's command-line.
Library/Modules/Name/Modules/::
    This directory contains nested modules (e.g., child modules) and
    is used for extending the current module functionality in a
    modular way.  There isn't a visible limitation in the number of
    Modules directories you can nest inside one module to achieve
    certain functionality so, you can create as many levels of Modules
    directories as you need.
Locales/::
    This directory contains shell scripts' localization files in PO
    format. The content of this directory is managed using the
    *idforge-locale(1)* command with the "Locales/idforge.conf"
    configuration file as argument.
Manuals/::
    This directory contains shell scripts' documentation manuals in
    asciidoc format as well as a Locales/ sub-directory to manage
    localization of documentation manuals. Documentation manuals are
    organized one per command (e.g., *idforge(1)* documentation is in
    idforge.1.asciidoc, *idforge-render(1)* documentation would be
    idforge-render.1.asciidoc, and so on for each command). The
    localization of documentation manuals in this directory are manged
    by *idforge-locale(1)* command and the Manuals/idforge.conf
    configuration file.

include::Commons/author.asciidoc[]

include::Commons/bugs.asciidoc[]

include::Commons/copyright.asciidoc[]

include::Commons/also.asciidoc[]

// vim: set syntax=asciidoc:
